---
// ResetPasswordForm.astro - MEJORADO: Con sistema de notificaciones y animaciones como login/logout
import { actions } from 'astro:actions';

// Get URL params to check for reset token
const { searchParams } = new URL(Astro.request.url);
const token = searchParams.get('token');
const type = searchParams.get('type');

// Get any action result
const result = Astro.getActionResult(actions.updatePassword);
const success = result?.data?.success;
const error = result?.error;

// ✅ Solo logs - NUNCA redirecciones en el servidor
if (error) {
  console.error('❌ Reset password error:', error.message);
}
if (success) {
  console.log('✅ Password reset successful');
}

// If no token, redirect to forgot password page
if (!token || type !== 'recovery') {
  console.error('❌ Invalid or missing reset token');
  // Note: En un caso real, podrías mostrar un error en lugar de redirigir
}
---

<!-- ✅ Container para transiciones -->
<div class="reset-password-container">
  <!-- ✅ Reset password card con transition name -->
  <div class="card w-full" id="reset-card" transition:name="reset-main-card">
    <header transition:name="reset-header">
      <div class="flex justify-center mb-4">
        <div class="flex h-12 w-12 items-center justify-center rounded-full bg-green-100">
          <svg class="h-6 w-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
          </svg>
        </div>
      </div>
      <h2>Set new password</h2>
      <p>Choose a strong password to secure your account</p>
    </header>

    <section transition:name="reset-form-section">
      <form method="POST" action={actions.updatePassword} class="form grid gap-6" id="reset-form">
        <!-- Hidden token field -->
        <input type="hidden" name="token" value={token || ''} />
        
        <div class="grid gap-2">
          <label for="password">New password</label>
          <input 
            type="password" 
            id="password" 
            name="password"
            required
            class="input"
            placeholder="Enter your new password"
            autocomplete="new-password"
            minlength="6"
          />
          <div class="text-xs text-muted-foreground">
            Password must be at least 6 characters long
          </div>
        </div>

        <div class="grid gap-2">
          <label for="confirm_password">Confirm new password</label>
          <input 
            type="password" 
            id="confirm_password" 
            name="confirm_password"
            required
            class="input"
            placeholder="Confirm your new password"
            autocomplete="new-password"
          />
        </div>
        
        <!-- Password strength indicator -->
        <div class="grid gap-2" id="password-strength" style="display: none;">
          <div class="flex justify-between items-center">
            <span class="text-xs text-muted-foreground">Password strength</span>
            <span class="text-xs text-muted-foreground" id="strength-text">Weak</span>
          </div>
          <div class="w-full bg-muted rounded-full h-2">
            <div class="bg-red-500 h-2 rounded-full transition-all duration-300" id="strength-bar" style="width: 25%"></div>
          </div>
        </div>
        
        <!-- Password requirements checklist -->
        <div class="grid gap-2 text-xs">
          <p class="text-muted-foreground">Your password should contain:</p>
          <div class="grid grid-cols-1 gap-1 ml-4">
            <div class="flex items-center gap-2" id="length-check">
              <div class="w-3 h-3 rounded-full bg-muted flex items-center justify-center">
                <div class="w-1.5 h-1.5 rounded-full bg-muted-foreground"></div>
              </div>
              <span class="text-muted-foreground">At least 6 characters</span>
            </div>
            <div class="flex items-center gap-2" id="uppercase-check">
              <div class="w-3 h-3 rounded-full bg-muted flex items-center justify-center">
                <div class="w-1.5 h-1.5 rounded-full bg-muted-foreground"></div>
              </div>
              <span class="text-muted-foreground">One uppercase letter (recommended)</span>
            </div>
            <div class="flex items-center gap-2" id="number-check">
              <div class="w-3 h-3 rounded-full bg-muted flex items-center justify-center">
                <div class="w-1.5 h-1.5 rounded-full bg-muted-foreground"></div>
              </div>
              <span class="text-muted-foreground">One number (recommended)</span>
            </div>
          </div>
        </div>

        <button type="submit" class="btn w-full" id="reset-btn" disabled transition:name="reset-submit-button">
          <span class="btn-text">Reset password</span>
          <div class="btn-spinner hidden">
            <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
          </div>
        </button>
      </form>
    </section>

    <footer class="flex flex-col items-center gap-2 mt-6" transition:name="reset-footer">
      <p class="text-center text-sm text-muted-foreground">
        Remember your password? 
        <a href="/auth/login" class="text-primary hover:underline transition-colors">Back to login</a>
      </p>
    </footer>
  </div>

  <!-- ✅ Loading state igual que login/logout -->
  <div class="card w-full text-center hidden" id="loading-overlay" transition:name="reset-loading-card">
    <div class="flex flex-col items-center gap-4 py-16">
      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      <p class="text-lg text-muted-foreground">Updating your password...</p>
      <p class="text-sm text-muted-foreground">This will only take a moment...</p>
    </div>
  </div>

  <!-- ✅ Success state -->
  <div class="card w-full text-center hidden" id="success-overlay" transition:name="reset-success-card">
    <div class="flex flex-col items-center gap-6 py-8">
      <div class="flex h-16 w-16 items-center justify-center rounded-full bg-green-100">
        <svg class="h-8 w-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
      </div>
      
      <div class="text-center">
        <h3 class="text-xl font-semibold text-green-800 mb-2">Password reset successful!</h3>
        <p class="text-sm text-green-700 mb-6">
          Your password has been updated successfully. You can now sign in with your new password.
        </p>
        
        <div class="flex flex-col gap-3">
          <a href="/auth/login" class="btn w-full bg-green-600 text-white hover:bg-green-700">
            Continue to login
          </a>
          <p class="text-xs text-green-600">
            You will be redirected automatically in <span id="countdown">5</span> seconds
          </p>
        </div>
      </div>
    </div>
  </div>

  <!-- ✅ Error state para tokens inválidos -->
  {(!token || type !== 'recovery') && (
    <div class="card w-full text-center" id="error-overlay">
      <div class="flex flex-col items-center gap-6 py-8">
        <div class="flex h-16 w-16 items-center justify-center rounded-full bg-red-100">
          <svg class="h-8 w-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z"></path>
          </svg>
        </div>
        
        <div class="text-center">
          <h3 class="text-xl font-semibold text-red-800 mb-2">Invalid reset link</h3>
          <p class="text-sm text-red-700 mb-6">
            The password reset link is invalid or has expired. Please request a new one.
          </p>
          
          <div class="flex flex-col gap-3">
            <a href="/auth/forgot-password" class="btn w-full">
              Request new reset link
            </a>
            <a href="/auth/login" class="text-sm text-red-700 hover:text-red-800 underline">
              Back to login
            </a>
          </div>
        </div>
      </div>
    </div>
  )}
</div>

<!-- ✅ Hidden success flag para JavaScript -->
{success && result?.data && (
  <div 
    id="reset-success-flag" 
    style="display: none;" 
    data-message={result.data.message || 'Password updated successfully'}
  ></div>
)}

<script>
  // ✅ AGREGADO: Import del sistema de notificaciones y NOTIFICATION_MESSAGES
  import { notifications } from '../../lib/utils/notifications';
  import { NOTIFICATION_MESSAGES } from '../../types/notifications';
  
  const resetFormElement = document.getElementById('reset-form') as HTMLFormElement;
  const resetBtn = document.getElementById('reset-btn') as HTMLButtonElement;
  const btnText = resetBtn?.querySelector('.btn-text');
  const btnSpinner = resetBtn?.querySelector('.btn-spinner');
  const resetCard = document.getElementById('reset-card');
  const loadingOverlay = document.getElementById('loading-overlay');
  const successOverlay = document.getElementById('success-overlay');
  const errorOverlay = document.getElementById('error-overlay');
  const successFlag = document.getElementById('reset-success-flag');
  const passwordInput = document.getElementById('password') as HTMLInputElement;
  const confirmPasswordInput = document.getElementById('confirm_password') as HTMLInputElement;
  const strengthContainer = document.getElementById('password-strength');
  const strengthBar = document.getElementById('strength-bar');
  const strengthText = document.getElementById('strength-text');

  // Check if we have a valid token
  const urlParams = new URLSearchParams(window.location.search);
  const hasValidToken = urlParams.get('token') && urlParams.get('type') === 'recovery';

  // ✅ MEJORADO: Handle successful password reset
  if (successFlag && hasValidToken) {
    const message = successFlag.getAttribute('data-message') || 'Password updated successfully';
    console.log('✅ Password reset successful');
    
    // ✅ AGREGADO: Mostrar notificación de éxito
    notifications.success(
      NOTIFICATION_MESSAGES.PASSWORD_UPDATED.title, 
      NOTIFICATION_MESSAGES.PASSWORD_UPDATED.description
    );
    
    // ✅ Mostrar estado de éxito inmediatamente
    resetCard?.classList.add('hidden');
    loadingOverlay?.classList.add('hidden');
    successOverlay?.classList.remove('hidden');
    
    // ✅ Countdown y redirección automática
    let countdown = 5;
    const countdownElement = document.getElementById('countdown');
    
    const timer = setInterval(() => {
      countdown--;
      if (countdownElement) {
        countdownElement.textContent = countdown.toString();
      }
      
      if (countdown <= 0) {
        clearInterval(timer);
        if ('startViewTransition' in document) {
          (document as any).startViewTransition(() => {
            window.location.href = '/auth/login?message=password-reset-success';
          });
        } else {
          window.location.href = '/auth/login?message=password-reset-success';
        }
      }
    }, 1000);
  }

  // ✅ Handle invalid token case
  if (!hasValidToken) {
    console.error('❌ Invalid or missing reset token');
    notifications.error(
      'Invalid reset link', 
      'The password reset link is invalid or has expired.'
    );
    
    // Hide other elements and show error
    resetCard?.classList.add('hidden');
    loadingOverlay?.classList.add('hidden');
    successOverlay?.classList.add('hidden');
    // errorOverlay is already shown via Astro template logic
    return; // Exit early
  }

  // ✅ Password strength validation (same as register)
  function checkPasswordStrength(password: string): boolean {
    let score = 0;
    let feedback = 'Weak';
    let color = 'bg-red-500';
    
    if (password.length >= 6) score += 1;
    if (password.length >= 10) score += 1;
    if (/[a-z]/.test(password)) score += 1;
    if (/[A-Z]/.test(password)) score += 1;
    if (/[0-9]/.test(password)) score += 1;
    if (/[^A-Za-z0-9]/.test(password)) score += 1;
    
    // Update requirements checklist
    updateRequirementCheck('length-check', password.length >= 6);
    updateRequirementCheck('uppercase-check', /[A-Z]/.test(password));
    updateRequirementCheck('number-check', /[0-9]/.test(password));
    
    switch (true) {
      case score <= 2:
        feedback = 'Weak';
        color = 'bg-red-500';
        break;
      case score <= 4:
        feedback = 'Fair';
        color = 'bg-yellow-500';
        break;
      case score <= 5:
        feedback = 'Good';
        color = 'bg-blue-500';
        break;
      case score >= 6:
        feedback = 'Strong';
        color = 'bg-green-500';
        break;
    }
    
    if (strengthBar && strengthText) {
      strengthBar.className = `${color} h-2 rounded-full transition-all duration-300`;
      strengthBar.style.width = `${(score / 6) * 100}%`;
      strengthText.textContent = feedback;
    }
    
    return score >= 3; // At least fair password
  }

  function updateRequirementCheck(elementId: string, passed: boolean): void {
    const element = document.getElementById(elementId);
    const circle = element?.querySelector('div > div');
    const text = element?.querySelector('span');
    
    if (circle && text) {
      if (passed) {
        circle.className = 'w-1.5 h-1.5 rounded-full bg-green-500';
        text.className = 'text-green-600';
      } else {
        circle.className = 'w-1.5 h-1.5 rounded-full bg-muted-foreground';
        text.className = 'text-muted-foreground';
      }
    }
  }

  // Show password strength on input
  if (passwordInput) {
    passwordInput.addEventListener('input', (e) => {
      const password = (e.target as HTMLInputElement).value;
      if (password.length > 0) {
        strengthContainer!.style.display = 'grid';
        checkPasswordStrength(password);
      } else {
        strengthContainer!.style.display = 'none';
      }
      validateForm();
    });
  }

  // Password confirmation validation
  function validatePasswordMatch(): boolean {
    const password = passwordInput?.value || '';
    const confirmPassword = confirmPasswordInput?.value || '';
    
    if (confirmPassword && password !== confirmPassword) {
      confirmPasswordInput?.setCustomValidity('Passwords do not match');
      return false;
    } else {
      confirmPasswordInput?.setCustomValidity('');
      return true;
    }
  }

  function validateForm(): void {
    const password = passwordInput?.value || '';
    const confirmPassword = confirmPasswordInput?.value || '';
    const passwordStrong = checkPasswordStrength(password);
    const passwordsMatch = validatePasswordMatch();
    const hasMinLength = password.length >= 6;
    
    // Enable button only if all validations pass
    if (resetBtn) {
      resetBtn.disabled = !(hasMinLength && passwordsMatch && password && confirmPassword);
    }
  }

  if (confirmPasswordInput) {
    confirmPasswordInput.addEventListener('input', () => {
      validatePasswordMatch();
      validateForm();
    });
  }

  // ✅ Handle form submission - IGUAL que login/logout
  if (resetFormElement) {
    resetFormElement.addEventListener('submit', (e) => {
      console.log('🔒 Reset password form submitted');

      // Final validation
      if (!validatePasswordMatch()) {
        e.preventDefault();
        notifications.error('Passwords do not match', 'Please verify your password.');
        return;
      }

      const password = passwordInput?.value || '';
      if (password.length < 6) {
        e.preventDefault();
        notifications.error('Password too short', 'Password must be at least 6 characters long.');
        return;
      }
      
      // Mostrar spinner en botón
      if (resetBtn) {
        resetBtn.disabled = true;
        btnText?.classList.add('hidden');
        btnSpinner?.classList.remove('hidden');
      }
      
      // Toggle cards después de breve delay
      setTimeout(() => {
        resetCard?.classList.add('hidden');
        loadingOverlay?.classList.remove('hidden');
      }, 300);
      
      // ✅ MEJORADO: Timeout con notificación de error
      const timeoutId = setTimeout(() => {
        console.log('⚠️ Password reset taking too long, showing error notification');
        
        // Reset UI
        resetFormState();
        loadingOverlay?.classList.add('hidden');
        resetCard?.classList.remove('hidden');
        
        // ✅ AGREGADO: Mostrar notificación de error
        notifications.error('Connection timeout', 'The request is taking too long. Please try again.');
      }, 8000);

      // Clear timeout if request succeeds
      if (successFlag) {
        clearTimeout(timeoutId);
      }
    });
  }

  // ✅ AGREGADO: Manejo de errores de URL
  const errorParam = urlParams.get('error');
  
  if (errorParam) {
    switch (errorParam) {
      case 'invalid-token':
        notifications.error('Invalid token', 'The password reset token is invalid or has expired.');
        break;
      case 'token-expired':
        notifications.error('Link expired', 'The password reset link has expired. Please request a new one.');
        break;
      case 'token-used':
        notifications.error('Link already used', 'This password reset link has already been used.');
        break;
      default:
        notifications.error(
          NOTIFICATION_MESSAGES.PASSWORD_UPDATE_ERROR.title, 
          NOTIFICATION_MESSAGES.PASSWORD_UPDATE_ERROR.description
        );
    }
    
    // Clean URL without reloading
    const cleanUrl = new URL(window.location.href);
    cleanUrl.searchParams.delete('error');
    window.history.replaceState({}, '', cleanUrl.toString());
  }

  function resetFormState(): void {
    if (resetBtn) {
      resetBtn.disabled = true; // Keep disabled until validation passes
      btnText?.classList.remove('hidden');
      btnSpinner?.classList.add('hidden');
    }
  }

  // Auto-focus password field
  document.addEventListener('DOMContentLoaded', () => {
    if (hasValidToken && passwordInput) {
      setTimeout(() => passwordInput.focus(), 100);
    }
    validateForm(); // Initial validation
  });

  // Clear form on back navigation
  window.addEventListener('pageshow', function(event) {
    if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {
      resetFormElement?.reset();
      resetFormUI();
      strengthContainer!.style.display = 'none';
      resetCard?.classList.remove('hidden');
      loadingOverlay?.classList.add('hidden');
      successOverlay?.classList.add('hidden');
    }
  });

  function resetFormUI(): void {
    resetFormState();
    validateForm();
  }

  // ✅ AGREGADO: Manejo de estado de red
  window.addEventListener('offline', () => {
    notifications.warning(
      NOTIFICATION_MESSAGES.NETWORK_ERROR.title, 
      'Please check your connection and try again.'
    );
  });

  window.addEventListener('online', () => {
    notifications.info('Connection restored', 'You are back online.');
  });
</script>

<style>
  /* ✅ EXACTAMENTE los mismos estilos que login/logout */
  .btn-spinner {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .btn:hover:not(:disabled) {
    transform: translateY(-1px);
    transition: transform 0.2s ease;
  }

  .reset-password-container {
    width: 100%;
    min-height: 400px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .hidden {
    display: none !important;
  }

  .input:focus {
    transform: scale(1.01);
    transition: transform 0.2s ease;
  }

  button:focus-visible,
  input:focus-visible,
  a:focus-visible {
    outline: 2px solid hsl(var(--ring));
    outline-offset: 2px;
  }

  .transition-colors {
    transition: color 0.2s ease;
  }
</style>