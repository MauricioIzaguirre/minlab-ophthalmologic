---
// ResetPasswordForm.astro - Componente funcional para restablecer contrase√±a
import { actions } from 'astro:actions';

// Get URL params to check for reset token
const { searchParams } = new URL(Astro.request.url);
const token = searchParams.get('token');
const type = searchParams.get('type');

// Get any action result
const result = Astro.getActionResult(actions.updatePassword);
const success = result?.data?.success;

// If no token, show error
if (!token || type !== 'recovery') {
  return Astro.redirect('/auth/forgot-password?error=invalid-link');
}
---

<div class="card w-full">
  <header>
    <div class="flex justify-center mb-4">
      <div class="flex h-12 w-12 items-center justify-center rounded-full bg-green-100">
        <svg class="h-6 w-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
        </svg>
      </div>
    </div>
    <h2>Set new password</h2>
    <p>Choose a strong password to secure your account</p>
  </header>

  <section>
    <form method="POST" action={actions.updatePassword} class="form grid gap-6" id="reset-form">
      <!-- Hidden token field -->
      <input type="hidden" name="token" value={token} />
      
      <div class="grid gap-2">
        <label for="password">New password</label>
        <input 
          type="password" 
          id="password" 
          name="password"
          required
          class="input"
          placeholder="Enter your new password"
          minlength="6"
        />
        <div class="text-xs text-muted-foreground">
          Password must be at least 6 characters long
        </div>
      </div>

      <div class="grid gap-2">
        <label for="confirm_password">Confirm new password</label>
        <input 
          type="password" 
          id="confirm_password" 
          name="confirm_password"
          required
          class="input"
          placeholder="Confirm your new password"
        />
      </div>
      
      <!-- Password strength indicator -->
      <div class="grid gap-2" id="password-strength" style="display: none;">
        <div class="flex justify-between items-center">
          <span class="text-xs text-muted-foreground">Password strength</span>
          <span class="text-xs text-muted-foreground" id="strength-text">Weak</span>
        </div>
        <div class="w-full bg-muted rounded-full h-2">
          <div class="bg-red-500 h-2 rounded-full transition-all duration-300" id="strength-bar" style="width: 25%"></div>
        </div>
      </div>
      
      <!-- Password requirements checklist -->
      <div class="grid gap-2 text-xs">
        <p class="text-muted-foreground">Your password should contain:</p>
        <div class="grid grid-cols-1 gap-1 ml-4">
          <div class="flex items-center gap-2" id="length-check">
            <div class="w-3 h-3 rounded-full bg-muted flex items-center justify-center">
              <div class="w-1.5 h-1.5 rounded-full bg-muted-foreground"></div>
            </div>
            <span class="text-muted-foreground">At least 6 characters</span>
          </div>
          <div class="flex items-center gap-2" id="uppercase-check">
            <div class="w-3 h-3 rounded-full bg-muted flex items-center justify-center">
              <div class="w-1.5 h-1.5 rounded-full bg-muted-foreground"></div>
            </div>
            <span class="text-muted-foreground">One uppercase letter (recommended)</span>
          </div>
          <div class="flex items-center gap-2" id="number-check">
            <div class="w-3 h-3 rounded-full bg-muted flex items-center justify-center">
              <div class="w-1.5 h-1.5 rounded-full bg-muted-foreground"></div>
            </div>
            <span class="text-muted-foreground">One number (recommended)</span>
          </div>
        </div>
      </div>

      <button type="submit" class="btn w-full" id="reset-btn" disabled>
        <span class="btn-text">Reset password</span>
        <div class="btn-spinner hidden">
          <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
        </div>
      </button>
    </form>
  </section>

  <footer class="flex flex-col items-center gap-2 mt-6">
    <p class="text-center text-sm text-muted-foreground">
      Remember your password? 
      <a href="/auth/login" class="text-primary hover:underline transition-colors">Back to login</a>
    </p>
  </footer>
</div>

<!-- Success message -->
{success && (
  <div class="card w-full mt-4 bg-green-50 border-green-200">
    <div class="flex items-start gap-3">
      <div class="flex h-8 w-8 items-center justify-center rounded-full bg-green-100 mt-1">
        <svg class="h-4 w-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
      </div>
      <div class="flex-1">
        <h3 class="font-semibold text-green-800 mb-1">Password reset successful!</h3>
        <p class="text-sm text-green-700 mb-3">
          Your password has been updated successfully. You can now sign in with your new password.
        </p>
        <div class="mt-4">
          <a href="/auth/login" class="btn btn-sm bg-green-600 text-white hover:bg-green-700">
            Continue to login
          </a>
        </div>
      </div>
    </div>
  </div>
)}

<script>
  const resetForm = document.getElementById('reset-form') as HTMLFormElement;
  const resetBtn = document.getElementById('reset-btn') as HTMLButtonElement;
  const btnText = resetBtn.querySelector('.btn-text');
  const btnSpinner = resetBtn.querySelector('.btn-spinner');
  const passwordInput = document.getElementById('password') as HTMLInputElement;
  const confirmPasswordInput = document.getElementById('confirm_password') as HTMLInputElement;
  const strengthContainer = document.getElementById('password-strength');
  const strengthBar = document.getElementById('strength-bar');
  const strengthText = document.getElementById('strength-text');

  // Password strength validation
  function checkPasswordStrength(password: string) {
    let score = 0;
    let feedback = 'Weak';
    let color = 'bg-red-500';
    
    if (password.length >= 6) score += 1;
    if (password.length >= 10) score += 1;
    if (/[a-z]/.test(password)) score += 1;
    if (/[A-Z]/.test(password)) score += 1;
    if (/[0-9]/.test(password)) score += 1;
    if (/[^A-Za-z0-9]/.test(password)) score += 1;
    
    // Update requirements checklist
    updateRequirementCheck('length-check', password.length >= 6);
    updateRequirementCheck('uppercase-check', /[A-Z]/.test(password));
    updateRequirementCheck('number-check', /[0-9]/.test(password));
    
    switch (true) {
      case score <= 2:
        feedback = 'Weak';
        color = 'bg-red-500';
        break;
      case score <= 4:
        feedback = 'Fair';
        color = 'bg-yellow-500';
        break;
      case score <= 5:
        feedback = 'Good';
        color = 'bg-blue-500';
        break;
      case score >= 6:
        feedback = 'Strong';
        color = 'bg-green-500';
        break;
    }
    
    if (strengthBar && strengthText) {
      strengthBar.className = `${color} h-2 rounded-full transition-all duration-300`;
      strengthBar.style.width = `${(score / 6) * 100}%`;
      strengthText.textContent = feedback;
    }
    
    return score >= 3; // At least fair password
  }

  function updateRequirementCheck(elementId: string, passed: boolean) {
    const element = document.getElementById(elementId);
    const circle = element?.querySelector('div > div');
    const text = element?.querySelector('span');
    
    if (circle && text) {
      if (passed) {
        circle.className = 'w-1.5 h-1.5 rounded-full bg-green-500';
        text.className = 'text-green-600';
      } else {
        circle.className = 'w-1.5 h-1.5 rounded-full bg-muted-foreground';
        text.className = 'text-muted-foreground';
      }
    }
  }

  // Show password strength on input
  if (passwordInput) {
    passwordInput.addEventListener('input', (e) => {
      const password = (e.target as HTMLInputElement).value;
      if (password.length > 0) {
        strengthContainer!.style.display = 'grid';
        checkPasswordStrength(password);
      } else {
        strengthContainer!.style.display = 'none';
      }
      validateForm();
    });
  }

  // Password confirmation validation
  function validatePasswordMatch() {
    const password = passwordInput?.value || '';
    const confirmPassword = confirmPasswordInput?.value || '';
    
    if (confirmPassword && password !== confirmPassword) {
      confirmPasswordInput?.setCustomValidity('Passwords do not match');
      return false;
    } else {
      confirmPasswordInput?.setCustomValidity('');
      return true;
    }
  }

  function validateForm() {
    const password = passwordInput?.value || '';
    const confirmPassword = confirmPasswordInput?.value || '';
    const passwordStrong = checkPasswordStrength(password);
    const passwordsMatch = validatePasswordMatch();
    const hasMinLength = password.length >= 6;
    
    // Enable button only if all validations pass
    resetBtn.disabled = !(hasMinLength && passwordsMatch && password && confirmPassword);
  }

  if (confirmPasswordInput) {
    confirmPasswordInput.addEventListener('input', () => {
      validatePasswordMatch();
      validateForm();
    });
  }

  // Handle form submission
  if (resetForm) {
    resetForm.addEventListener('submit', (e) => {
      if (!validatePasswordMatch()) {
        e.preventDefault();
        console.error('‚ùå Passwords do not match');
        return;
      }

      console.log('üîí Reset password form submitted');

      // Show loading state
      resetBtn.disabled = true;
      btnText!.textContent = 'Resetting...';
      btnSpinner?.classList.remove('hidden');
    });
  }

  function resetFormState() {
    if (resetBtn) {
      resetBtn.disabled = true;
      if (btnText) btnText.textContent = 'Reset password';
      btnSpinner?.classList.add('hidden');
    }
  }

  // Auto-focus password field
  document.addEventListener('DOMContentLoaded', () => {
    const passwordField = document.getElementById('password') as HTMLInputElement;
    if (passwordField) {
      passwordField.focus();
    }
    validateForm();
  });

  // Clear form on back navigation
  window.addEventListener('pageshow', function(event) {
    if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {
      resetForm?.reset();
      resetFormState();
      strengthContainer!.style.display = 'none';
    }
  });
</script>

<style>
  .btn-spinner {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .transition-colors {
    transition: color 0.2s ease;
  }

  .btn-sm {
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
  }
</style>