---
// LogoutConfirmation.astro - REDIRECCI√ìN INMEDIATA SEGUINDO MEJORES PR√ÅCTICAS
import { actions } from 'astro:actions';

// ‚úÖ MEJOR PR√ÅCTICA: Manejar redirecci√≥n en la p√°gina, no en la action
const result = Astro.getActionResult(actions.logout);

// ‚úÖ REDIRECCI√ìN INMEDIATA si el logout fue exitoso
if (result && !result.error && result.data?.success) {
  console.log('‚úÖ Logout successful, redirecting immediately...');
  return Astro.redirect('/auth/login?message=logged-out');
}

// Log errors pero no bloquear la interfaz
if (result?.error) {
  console.error('‚ùå Logout error:', result.error.message);
}

// Get URL search params for messages
const { searchParams } = new URL(Astro.request.url);
const message = searchParams.get('message');
const errorParam = searchParams.get('error');

if (errorParam) {
  console.error('‚ùå Logout error from URL:', errorParam);
}

// Get user info from locals (set by middleware)
const user = Astro.locals.user;
---

<!-- ‚úÖ View Transitions container -->
<div class="logout-container">
  <!-- ‚úÖ Logout card with transition name -->
  <div class="card w-full text-center" id="logout-card" transition:name="logout-main-card">
    <header>
      <div class="flex justify-center mb-4">
        <div class="flex h-16 w-16 items-center justify-center rounded-full bg-muted">
          <svg class="h-8 w-8 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
          </svg>
        </div>
      </div>
      <h2>Sign out of your account</h2>
      <p>Are you sure you want to sign out? You'll need to sign in again to access your account.</p>
    </header>

    <section class="my-6">
      <!-- User info card -->
      <div class="bg-muted/50 rounded-lg p-4 mb-6" transition:name="user-info-card">
        <div class="flex items-center justify-center gap-3">
          <div class="flex h-10 w-10 items-center justify-center rounded-full bg-primary text-primary-foreground font-semibold">
            {user ? (user.first_name.charAt(0) + user.last_name.charAt(0)) : 'U'}
          </div>
          <div class="text-left">
            <p class="font-semibold">
              {user ? `${user.first_name} ${user.last_name}` : 'Unknown User'}
            </p>
            <p class="text-sm text-muted-foreground">
              {user ? user.email : 'No email available'}
            </p>
          </div>
        </div>
      </div>
      
      <!-- Quick status indicators -->
      <div class="grid gap-2 text-sm">
        <p class="text-muted-foreground">Before you go:</p>
        <div class="flex items-center justify-center gap-4 text-xs">
          <span class="flex items-center gap-1">
            <svg class="h-3 w-3 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            All changes saved
          </span>
          <span class="flex items-center gap-1">
            <svg class="h-3 w-3 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"></path>
            </svg>
            Data synced
          </span>
        </div>
      </div>
    </section>
    
    <footer class="flex flex-col items-center gap-3">
      <div class="flex gap-3 w-full">
        <button type="button" class="btn-outline flex-1" id="cancel-btn">
          Cancel
        </button>
        
        <!-- ‚úÖ MEJORADO: Form action con View Transitions autom√°ticas -->
        <form method="POST" action={actions.logout} class="flex-1" id="logout-form" data-astro-transition="persist">
          <button type="submit" class="btn w-full bg-destructive text-destructive-foreground hover:bg-destructive/90" id="logout-btn">
            <span class="btn-text">Sign out</span>
            <div class="btn-spinner hidden">
              <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
            </div>
          </button>
        </form>
      </div>
      
      <p class="text-xs text-muted-foreground">
        You can always sign back in with your credentials
      </p>
    </footer>
  </div>

  <!-- ‚úÖ Loading state - Solo visual, no funcional -->
  <div class="card w-full text-center hidden" id="loading-overlay" transition:name="logout-loading-card">
    <div class="flex flex-col items-center gap-4 py-16">
      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      <p class="text-lg text-muted-foreground">Signing you out...</p>
      <p class="text-sm text-muted-foreground">Redirecting...</p>
    </div>
  </div>
</div>

<script>
  const logoutForm = document.getElementById('logout-form') as HTMLFormElement;
  const logoutBtn = document.getElementById('logout-btn') as HTMLButtonElement;
  const btnText = logoutBtn.querySelector('.btn-text');
  const btnSpinner = logoutBtn.querySelector('.btn-spinner');
  const cancelBtn = document.getElementById('cancel-btn') as HTMLButtonElement;
  const loadingOverlay = document.getElementById('loading-overlay');
  const logoutCard = document.getElementById('logout-card');

  // ‚úÖ Handle cancel button - View Transitions nativas
  function handleCancel() {
    console.log('üîô User cancelled logout');
    const referrer = document.referrer;
    const fallbackUrl = referrer && !referrer.includes('/logout') ? referrer : '/dashboard';
    
    // ‚úÖ MEJOR: Usar navigate con View Transitions si est√° disponible
    if ('startViewTransition' in document && 'navigation' in window) {
      (document as any).startViewTransition(() => {
        window.location.href = fallbackUrl;
      });
    } else {
      window.location.href = fallbackUrl;
    }
  }

  // Attach cancel handler
  if (cancelBtn) {
    cancelBtn.addEventListener('click', handleCancel);
  }
  
  // ‚úÖ MEJORADO: Form submission con UI feedback m√≠nimo
  if (logoutForm) {
    logoutForm.addEventListener('submit', (e) => {
      console.log('üö™ Logout form submitted');
      
      // ‚úÖ UI feedback m√≠nimo - solo spinner en bot√≥n
      logoutBtn.disabled = true;
      btnText?.classList.add('hidden');
      btnSpinner?.classList.remove('hidden');
      
      // ‚úÖ OPCIONAL: Mostrar loading despu√©s de breve delay para UX
      const showLoadingTimeout = setTimeout(() => {
        logoutCard?.classList.add('hidden');
        loadingOverlay?.classList.remove('hidden');
      }, 500); // 500ms delay, suficiente para que se procese r√°pido
      
      // ‚úÖ IMPORTANTE: Limpiar timeout si el form se procesa r√°pido
      logoutForm.addEventListener('submit', () => {
        clearTimeout(showLoadingTimeout);
      }, { once: true });
      
      // ‚úÖ CR√çTICO: La redirecci√≥n ocurre en el componente .astro autom√°ticamente
      // No hay setTimeout aqu√≠ - la respuesta del servidor redirige inmediatamente
    });
  }
  
  // Handle ESC key to cancel
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      console.log('‚å®Ô∏è ESC pressed, cancelling logout');
      handleCancel();
    }
  });

  // Auto-focus cancel button for accessibility
  document.addEventListener('DOMContentLoaded', () => {
    if (cancelBtn) {
      cancelBtn.focus();
      console.log('üéØ Cancel button focused');
    }
  });

  // ‚úÖ View Transitions event handlers
  document.addEventListener('astro:page-load', () => {
    console.log('üìÑ Logout page loaded');
  });

  // ‚úÖ Limpiar estados si se navega de vuelta a esta p√°gina
  document.addEventListener('astro:after-swap', () => {
    // Reset button state
    if (logoutBtn) {
      logoutBtn.disabled = false;
      btnText?.classList.remove('hidden');
      btnSpinner?.classList.add('hidden');
    }
    
    // Ensure correct card is showing
    if (logoutCard && loadingOverlay) {
      logoutCard.classList.remove('hidden');
      loadingOverlay.classList.add('hidden');
    }
  });
</script>

<style>
  /* ‚úÖ Estilos esenciales - View Transitions maneja animaciones */
  .btn-spinner {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  /* ‚úÖ Hover suave */
  .btn:hover:not(:disabled) {
    transform: translateY(-1px);
    transition: transform 0.2s ease;
  }

  /* ‚úÖ Container estable */
  .logout-container {
    width: 100%;
    min-height: 400px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  /* ‚úÖ Estados simples */
  .hidden {
    display: none !important;
  }

  /* ‚úÖ Smooth transitions solo para elementos espec√≠ficos */
  .card {
    transition: opacity 0.3s ease;
  }

  /* ‚úÖ Loading animation optimizada */
  .animate-spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
</style>