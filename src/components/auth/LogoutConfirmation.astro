---
// LogoutConfirmation.astro - Functional Logout Component
import { actions } from 'astro:actions';

// Get any action result from the current request
const formData = await Astro.request.formData();
const error = formData.get('error') ? JSON.parse(String(formData.get('error'))) : null;
const data = formData.get('data');
const success = data && typeof data === 'object' && 'success' in data ? (data as { success: boolean }).success : false;

// Get user info from locals (set by middleware)
const user = Astro.locals.user;
---

<div class="card w-full text-center">
  <header>
    <div class="flex justify-center mb-4">
      <div class="flex h-16 w-16 items-center justify-center rounded-full bg-muted">
        <svg class="h-8 w-8 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
        </svg>
      </div>
    </div>
    <h2>Sign out of your account</h2>
    <p>Are you sure you want to sign out? You'll need to sign in again to access your account.</p>
  </header>

  <!-- Display messages -->
  {error && (
    <div class="bg-red-50 border border-red-200 text-red-800 rounded-lg p-3 mb-4 text-sm">
      {error.message}
    </div>
  )}

  {success && (
    <div class="bg-green-50 border border-green-200 text-green-800 rounded-lg p-3 mb-4 text-sm">
      You have been signed out successfully. Redirecting...
    </div>
  )}

  <section class="my-6">
    <!-- User info card -->
    <div class="bg-muted/50 rounded-lg p-4 mb-6">
      <div class="flex items-center justify-center gap-3">
        <div class="flex h-10 w-10 items-center justify-center rounded-full bg-primary text-primary-foreground font-semibold">
          {user ? (user.first_name.charAt(0) + user.last_name.charAt(0)) : 'U'}
        </div>
        <div class="text-left">
          <p class="font-semibold">
            {user ? `${user.first_name} ${user.last_name}` : 'Unknown User'}
          </p>
          <p class="text-sm text-muted-foreground">
            {user ? user.email : 'No email available'}
          </p>
        </div>
      </div>
    </div>
    
    <!-- Quick status indicators -->
    <div class="grid gap-2 text-sm">
      <p class="text-muted-foreground">Before you go:</p>
      <div class="flex items-center justify-center gap-4 text-xs">
        <span class="flex items-center gap-1">
          <svg class="h-3 w-3 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>
          All changes saved
        </span>
        <span class="flex items-center gap-1">
          <svg class="h-3 w-3 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"></path>
          </svg>
          Data synced
        </span>
      </div>
    </div>
  </section>
  
  <footer class="flex flex-col items-center gap-3">
    <div class="flex gap-3 w-full">
      <button type="button" class="btn-outline flex-1" id="cancel-btn">
        Cancel
      </button>
      
      <!-- Logout form -->
      <form method="POST" action={actions.logout} class="flex-1">
        <button type="submit" class="btn w-full bg-destructive text-destructive-foreground hover:bg-destructive/90" id="logout-btn">
          Sign out
        </button>
      </form>
    </div>
    
    <p class="text-xs text-muted-foreground">
      You can always sign back in with your credentials
    </p>
  </footer>
</div>

<!-- Loading overlay (initially hidden) -->
<div class="card w-full text-center hidden" id="loading-overlay">
  <div class="flex flex-col items-center gap-4 py-8">
    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
    <p class="text-muted-foreground">Signing you out...</p>
  </div>
</div>

<script>
  // Add type declaration for global functions
  declare global {
    interface Window {
      handleCancel: () => void;
    }
  }

  const logoutForm = document.querySelector('form[action*="logout"]') as HTMLFormElement;
  const logoutBtn = document.getElementById('logout-btn') as HTMLButtonElement;
  const cancelBtn = document.getElementById('cancel-btn') as HTMLButtonElement;
  const loadingOverlay = document.getElementById('loading-overlay');
  const logoutCard = document.querySelector('.card:not(.hidden)');
  
  // Handle cancel button
  function handleCancel() {
    // Redirect back to dashboard or previous page
    const referrer = document.referrer;
    if (referrer && !referrer.includes('/logout')) {
      window.location.href = referrer;
    } else {
      window.location.href = '/dashboard';
    }
  }

  // Attach cancel handler
  if (cancelBtn) {
    cancelBtn.addEventListener('click', handleCancel);
  }
  
  // Handle logout form submission
  if (logoutForm) {
    logoutForm.addEventListener('submit', (e) => {
      // Show loading state
      logoutBtn.disabled = true;
      logoutBtn.textContent = 'Signing out...';
      
      // Show loading overlay after short delay
      setTimeout(() => {
        logoutCard?.classList.add('hidden');
        loadingOverlay?.classList.remove('hidden');
      }, 500);
    });
  }
  
  // Handle ESC key to cancel
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      handleCancel();
    }
  });

  // Auto-redirect after successful logout
  if (window.location.search.includes('success')) {
    setTimeout(() => {
      window.location.href = '/auth/login?message=logged-out';
    }, 2000);
  }
</script>

<style>
  .btn {
    @apply inline-flex items-center justify-center rounded-md text-sm font-medium;
    @apply ring-offset-background transition-colors;
    @apply focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2;
    @apply disabled:pointer-events-none disabled:opacity-50;
    @apply bg-primary text-primary-foreground hover:bg-primary/90;
    @apply h-10 px-4 py-2;
  }
  
  .btn-outline {
    @apply inline-flex items-center justify-center rounded-md text-sm font-medium;
    @apply ring-offset-background transition-colors;
    @apply focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2;
    @apply disabled:pointer-events-none disabled:opacity-50;
    @apply border border-input bg-background hover:bg-accent hover:text-accent-foreground;
    @apply h-10 px-4 py-2;
  }

  .card {
    @apply rounded-lg border bg-card text-card-foreground shadow-sm p-6;
  }
</style>