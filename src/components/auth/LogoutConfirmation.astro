---
// LogoutConfirmation.astro - CON ANIMACI√ìN RECUPERADA SIN ERRORES
import { actions } from 'astro:actions';

// Obtener resultado de la action
const result = Astro.getActionResult(actions.logout);
const success = result?.data?.success;
const error = result?.error;

// Get URL search params for messages
const { searchParams } = new URL(Astro.request.url);
const message = searchParams.get('message');
const errorParam = searchParams.get('error');

// Get user info from locals (set by middleware)
const user = Astro.locals.user;

// Log errors to console instead of showing to user
if (error) {
  console.error('‚ùå Logout error:', error.message);
}

if (errorParam) {
  console.error('‚ùå Logout error from URL:', errorParam);
}
---

<!-- Container para evitar saltos de layout -->
<div class="card-container">
  <div class="card w-full text-center" id="logout-card">
    <header>
      <div class="flex justify-center mb-4">
        <div class="flex h-16 w-16 items-center justify-center rounded-full bg-muted">
          <svg class="h-8 w-8 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
          </svg>
        </div>
      </div>
      <h2>Sign out of your account</h2>
      <p>Are you sure you want to sign out? You'll need to sign in again to access your account.</p>
    </header>

    <section class="my-6">
      <!-- User info card -->
      <div class="bg-muted/50 rounded-lg p-4 mb-6">
        <div class="flex items-center justify-center gap-3">
          <div class="flex h-10 w-10 items-center justify-center rounded-full bg-primary text-primary-foreground font-semibold">
            {user ? (user.first_name.charAt(0) + user.last_name.charAt(0)) : 'U'}
          </div>
          <div class="text-left">
            <p class="font-semibold">
              {user ? `${user.first_name} ${user.last_name}` : 'Unknown User'}
            </p>
            <p class="text-sm text-muted-foreground">
              {user ? user.email : 'No email available'}
            </p>
          </div>
        </div>
      </div>
      
      <!-- Quick status indicators -->
      <div class="grid gap-2 text-sm">
        <p class="text-muted-foreground">Before you go:</p>
        <div class="flex items-center justify-center gap-4 text-xs">
          <span class="flex items-center gap-1">
            <svg class="h-3 w-3 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            All changes saved
          </span>
          <span class="flex items-center gap-1">
            <svg class="h-3 w-3 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"></path>
            </svg>
            Data synced
          </span>
        </div>
      </div>
    </section>
    
    <footer class="flex flex-col items-center gap-3">
      <div class="flex gap-3 w-full">
        <button type="button" class="btn-outline flex-1" id="cancel-btn">
          Cancel
        </button>
        
        <form method="POST" action={actions.logout} class="flex-1" id="logout-form">
          <button type="submit" class="btn w-full bg-destructive text-destructive-foreground hover:bg-destructive/90" id="logout-btn">
            <span class="btn-text">Sign out</span>
            <div class="btn-spinner hidden">
              <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
            </div>
          </button>
        </form>
      </div>
      
      <p class="text-xs text-muted-foreground">
        You can always sign back in with your credentials
      </p>
    </footer>
  </div>

  <!-- Loading overlay (initially hidden) - MISMA POSICI√ìN ABSOLUTA -->
  <div class="card w-full text-center hidden" id="loading-overlay">
    <div class="flex flex-col items-center gap-4 py-8" style="padding-top: 4rem; padding-bottom: 4rem;">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      <p class="text-muted-foreground">Signing you out...</p>
      <p class="text-xs text-muted-foreground">This will only take a moment...</p>
    </div>
  </div>
</div>

<!-- Hidden success flag for JavaScript -->
{success && (
  <div id="logout-success-flag" style="display: none;" data-redirect="/auth/login?message=logged-out"></div>
)}

<script>
  const logoutForm = document.getElementById('logout-form') as HTMLFormElement;
  const logoutBtn = document.getElementById('logout-btn') as HTMLButtonElement;
  const btnText = logoutBtn.querySelector('.btn-text');
  const btnSpinner = logoutBtn.querySelector('.btn-spinner');
  const cancelBtn = document.getElementById('cancel-btn') as HTMLButtonElement;
  const loadingOverlay = document.getElementById('loading-overlay');
  const logoutCard = document.getElementById('logout-card');
  const successFlag = document.getElementById('logout-success-flag');

  // Handle successful logout - JavaScript redirect only
  if (successFlag) {
    const redirectUrl = successFlag.getAttribute('data-redirect') || '/auth/login';
    console.log('‚úÖ Logout successful, redirecting to:', redirectUrl);
    
    // Show loading overlay immediately
    logoutCard?.classList.add('hidden');
    loadingOverlay?.classList.remove('hidden');
    
    // Redirect after showing loading animation
    setTimeout(() => {
      if ('startViewTransition' in document) {
        (document as any).startViewTransition(() => {
          window.location.href = redirectUrl;
        });
      } else {
        window.location.href = redirectUrl;
      }
    }, 1500);
  }

  // Log errors to console instead of showing them
  const urlParams = new URLSearchParams(window.location.search);
  const errorParam = urlParams.get('error');
  if (errorParam) {
    console.error('‚ùå Error parameter found:', errorParam);
  }

  // Handle cancel button
  function handleCancel() {
    console.log('üîô User cancelled logout');
    const referrer = document.referrer;
    if (referrer && !referrer.includes('/logout')) {
      if ('startViewTransition' in document) {
        (document as any).startViewTransition(() => {
          window.location.href = referrer;
        });
      } else {
        window.location.href = referrer;
      }
    } else {
      if ('startViewTransition' in document) {
        (document as any).startViewTransition(() => {
          window.location.href = '/dashboard';
        });
      } else {
        window.location.href = '/dashboard';
      }
    }
  }

  // Attach cancel handler
  if (cancelBtn) {
    cancelBtn.addEventListener('click', handleCancel);
  }
  
  // Handle logout form submission - ANIMACI√ìN SIN PARPADEO
  if (logoutForm) {
    logoutForm.addEventListener('submit', (e) => {
      console.log('üö™ Logout form submitted');
      
      // Show button loading state immediately
      logoutBtn.disabled = true;
      btnText?.classList.add('hidden');
      btnSpinner?.classList.remove('hidden');
      
      // Animaci√≥n suave sin parpadeo
      setTimeout(() => {
        console.log('üîÑ Starting smooth transition...');
        
        // Fade out del card original
        logoutCard?.classList.add('fade-out');
        
        // Despu√©s de que termine el fade out, mostrar loading
        setTimeout(() => {
          logoutCard?.classList.add('hidden');
          loadingOverlay?.classList.remove('hidden');
          loadingOverlay?.classList.add('fade-in');
        }, 300); // Espera a que termine la transici√≥n de fade-out
        
      }, 400); // Delay ligeramente m√°s corto para mejor UX
      
      // Fallback: if no redirect happens in 10 seconds, force redirect
      setTimeout(() => {
        console.log('‚ö†Ô∏è Logout taking too long, forcing redirect...');
        window.location.href = '/auth/login?message=logged-out';
      }, 10000);
    });
  }
  
  // Handle ESC key to cancel
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !successFlag) {
      console.log('‚å®Ô∏è ESC pressed, cancelling logout');
      handleCancel();
    }
  });

  // Auto-focus cancel button for accessibility
  document.addEventListener('DOMContentLoaded', () => {
    if (cancelBtn && !successFlag) {
      cancelBtn.focus();
      console.log('üéØ Cancel button focused');
    }
  });
</script>

<style>
  .btn-spinner {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  /* View Transitions support */
  #logout-card {
    view-transition-name: logout-card;
  }

  #loading-overlay {
    view-transition-name: loading-overlay;
  }

  /* Smooth animations */
  .btn:hover:not(:disabled) {
    transform: translateY(-1px);
    transition: transform 0.2s ease;
  }

  /* SOLUCI√ìN ANTI-PARPADEO: Ambos cards ocupan el mismo espacio */
  .card-container {
    position: relative;
    min-height: 400px; /* Altura m√≠nima para evitar saltos */
  }

  #logout-card, #loading-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    transition: opacity 0.4s cubic-bezier(0.4, 0, 0.2, 1), 
                transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    transform: translateZ(0); /* Fuerza aceleraci√≥n por hardware */
    backface-visibility: hidden; /* Evita parpadeos en navegadores */
  }

  /* Estado visible */
  #logout-card:not(.hidden), #loading-overlay:not(.hidden) {
    opacity: 1;
    transform: translateZ(0) scale(1);
    z-index: 1;
  }

  /* Estado oculto */
  .hidden {
    opacity: 0;
    transform: translateZ(0) scale(0.98);
    pointer-events: none;
    z-index: 0;
  }

  /* Animaci√≥n de fade m√°s suave */
  .fade-out {
    opacity: 0;
    transform: translateZ(0) scale(0.98);
    transition: opacity 0.3s ease-out, transform 0.3s ease-out;
  }

  .fade-in {
    opacity: 1;
    transform: translateZ(0) scale(1);
    transition: opacity 0.3s ease-in, transform 0.3s ease-in;
  }
</style>