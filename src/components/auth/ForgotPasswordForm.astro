---
// ForgotPasswordForm.astro - Functional Password Recovery Component
import { actions } from 'astro:actions';

// Get any action result from the current request
const result = Astro.getActionResult(actions.recoverPassword);
const error = result?.error;
const success = result?.data?.success;
---

<div class="card w-full">
  <header>
    <h2>Reset your password</h2>
    <p>Enter your email address and we'll send you a link to reset your password</p>
  </header>

  <!-- Display messages -->
  {error && (
    <div class="bg-red-50 border border-red-200 text-red-800 rounded-lg p-3 mb-4 text-sm">
      {error.message}
    </div>
  )}

  <section>
    <form method="POST" action={actions.recoverPassword} class="form grid gap-6" id="forgot-form">
      <div class="grid gap-2">
        <label for="email">Email address</label>
        <input 
          type="email" 
          id="email" 
          name="email"
          required
          class="input"
          placeholder="Enter your email address"
        />
      </div>

      <button type="submit" class="btn w-full" id="reset-btn">
        Send reset link
      </button>
    </form>
  </section>

  <footer class="flex flex-col items-center gap-2 mt-6">
    <div class="flex items-center gap-2">
      <a href="/auth/login" class="text-sm text-center underline underline-offset-4 hover:text-primary">
        ‚Üê Back to login
      </a>
    </div>
  </footer>
</div>

<!-- Success message (initially hidden) -->
{success && (
  <div class="card w-full mt-4 bg-green-50 border-green-200">
    <div class="flex items-center gap-3">
      <div class="flex h-8 w-8 items-center justify-center rounded-full bg-green-100">
        <svg class="h-4 w-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
      </div>
      <div>
        <h3 class="font-semibold text-green-800">Check your email</h3>
        <p class="text-sm text-green-700">We've sent a password reset link to your email address.</p>
      </div>
    </div>
  </div>
)}

<!-- Loading overlay (initially hidden) -->
<div class="card w-full hidden" id="loading-overlay">
  <div class="flex flex-col items-center gap-4 py-8">
    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
    <p class="text-muted-foreground">Sending reset link...</p>
  </div>
</div>

<script>
  const forgotForm = document.getElementById('forgot-form') as HTMLFormElement;
  const resetBtn = document.getElementById('reset-btn') as HTMLButtonElement;
  const loadingOverlay = document.getElementById('loading-overlay');
  const forgotCard = document.querySelector('.card:not(.hidden)');

  // Handle form submission
  if (forgotForm) {
    forgotForm.addEventListener('submit', (e) => {
      // Show loading state
      resetBtn.disabled = true;
      resetBtn.textContent = 'Sending...';
      
      // Show loading overlay after short delay
      const loadingTimeout = setTimeout(() => {
        forgotCard?.classList.add('hidden');
        loadingOverlay?.classList.remove('hidden');
      }, 1000);
      
      // Clear timeout if form completes quickly
      const observer = new MutationObserver(() => {
        clearTimeout(loadingTimeout);
      });
      observer.observe(document.body, { childList: true, subtree: true });
    });
  }

  // Clear form on back navigation
  window.addEventListener('pageshow', function(event) {
    if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {
      forgotForm?.reset();
      if (resetBtn) {
        resetBtn.disabled = false;
        resetBtn.textContent = 'Send reset link';
      }
    }
  });
</script>

<style>
  .input {
    @apply px-3 py-2 border border-input bg-background rounded-md text-sm ring-offset-background;
    @apply focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2;
    @apply disabled:cursor-not-allowed disabled:opacity-50;
  }
  
  .btn {
    @apply inline-flex items-center justify-center rounded-md text-sm font-medium;
    @apply ring-offset-background transition-colors;
    @apply focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2;
    @apply disabled:pointer-events-none disabled:opacity-50;
    @apply bg-primary text-primary-foreground hover:bg-primary/90;
    @apply h-10 px-4 py-2;
  }

  .card {
    @apply rounded-lg border bg-card text-card-foreground shadow-sm p-6;
  }

  .form {
    @apply space-y-4;
  }
</style>