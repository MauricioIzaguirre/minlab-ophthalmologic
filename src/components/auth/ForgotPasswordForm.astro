---
// ForgotPasswordForm.astro - MEJORADO: Con sistema de notificaciones y animaciones como login/logout
import { actions } from 'astro:actions';

// ‚úÖ SOLO obtener resultado, NUNCA hacer Astro.redirect()
const result = Astro.getActionResult(actions.recoverPassword);
const success = result?.data?.success;
const error = result?.error;

// ‚úÖ Solo logs - NUNCA redirecciones en el servidor
if (error) {
  console.error('‚ùå Forgot password error:', error.message);
}
if (success) {
  console.log('‚úÖ Password recovery email sent successfully');
}

// Get URL search params for messages
const { searchParams } = new URL(Astro.request.url);
const errorParam = searchParams.get('error');

if (errorParam) {
  console.error('‚ùå Forgot password error from URL:', errorParam);
}
---

<!-- ‚úÖ Container para transiciones -->
<div class="forgot-password-container">
  <!-- ‚úÖ Main card con transition name -->
  <div class="card w-full" id="forgot-card" transition:name="forgot-main-card">
    <header transition:name="forgot-header">
      <div class="flex justify-center mb-4">
        <div class="flex h-12 w-12 items-center justify-center rounded-full bg-blue-100">
          <svg class="h-6 w-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
          </svg>
        </div>
      </div>
      <h2>Reset your password</h2>
      <p>Enter your email address and we'll send you a link to reset your password</p>
    </header>

    <section transition:name="forgot-form-section">
      <form method="POST" action={actions.recoverPassword} class="form grid gap-6" id="forgot-form">
        <div class="grid gap-2">
          <label for="email">Email address</label>
          <input 
            type="email" 
            id="email" 
            name="email"
            required
            class="input"
            placeholder="Enter your email address"
            autocomplete="email"
          />
          <div class="text-xs text-muted-foreground">
            We'll send reset instructions to this email address
          </div>
        </div>

        <button type="submit" class="btn w-full" id="forgot-btn" transition:name="forgot-submit-button">
          <span class="btn-text">Send reset link</span>
          <div class="btn-spinner hidden">
            <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
          </div>
        </button>
      </form>
    </section>

    <footer class="flex flex-col items-center gap-2 mt-6" transition:name="forgot-footer">
      <div class="flex items-center gap-2">
        <a href="/auth/login" class="text-sm text-center underline underline-offset-4 hover:text-primary transition-colors">
          ‚Üê Back to login
        </a>
      </div>
    </footer>
  </div>

  <!-- ‚úÖ Loading state igual que login/logout -->
  <div class="card w-full text-center hidden" id="loading-overlay" transition:name="forgot-loading-card">
    <div class="flex flex-col items-center gap-4 py-16">
      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      <p class="text-lg text-muted-foreground">Sending reset link...</p>
      <p class="text-sm text-muted-foreground">This may take a few seconds...</p>
    </div>
  </div>

  <!-- ‚úÖ Success state (reemplaza el card anterior) -->
  <div class="card w-full text-center hidden" id="success-overlay" transition:name="forgot-success-card">
    <div class="flex flex-col items-center gap-6 py-8">
      <div class="flex h-16 w-16 items-center justify-center rounded-full bg-green-100">
        <svg class="h-8 w-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
      </div>
      
      <div class="text-center">
        <h3 class="text-xl font-semibold text-green-800 mb-2">Check your email</h3>
        <p class="text-sm text-green-700 mb-4">
          We've sent a password reset link to your email address. Please check your inbox and follow the instructions.
        </p>
        
        <div class="grid gap-2 text-xs text-green-600 mb-6">
          <div class="flex items-center justify-center gap-2">
            <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>The link will expire in 24 hours</span>
          </div>
          <div class="flex items-center justify-center gap-2">
            <svg class="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <span>Check your spam folder if you don't see it</span>
          </div>
        </div>
        
        <div class="flex flex-col gap-3">
          <button type="button" class="btn-outline w-full" onclick="window.location.reload()">
            Send another email
          </button>
          <a href="/auth/login" class="text-sm text-green-700 hover:text-green-800 underline">
            Back to login
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- ‚úÖ Hidden success flag para JavaScript -->
{success && result?.data && (
  <div 
    id="forgot-success-flag" 
    style="display: none;" 
    data-message={result.data.message || 'Reset link sent successfully'}
  ></div>
)}

<script>
  // ‚úÖ AGREGADO: Import del sistema de notificaciones y NOTIFICATION_MESSAGES
  import { notifications } from '../../lib/utils/notifications';
  import { NOTIFICATION_MESSAGES } from '../../types/notifications';
  
  const forgotForm = document.getElementById('forgot-form') as HTMLFormElement;
  const forgotBtn = document.getElementById('forgot-btn') as HTMLButtonElement;
  const btnText = forgotBtn?.querySelector('.btn-text');
  const btnSpinner = forgotBtn?.querySelector('.btn-spinner');
  const forgotCard = document.getElementById('forgot-card');
  const loadingOverlay = document.getElementById('loading-overlay');
  const successOverlay = document.getElementById('success-overlay');
  const successFlag = document.getElementById('forgot-success-flag');

  // ‚úÖ MEJORADO: Handle successful password reset request
  if (successFlag) {
    const message = successFlag.getAttribute('data-message') || 'Reset link sent successfully';
    console.log('‚úÖ Forgot password request successful');
    
    // ‚úÖ AGREGADO: Mostrar notificaci√≥n de √©xito
    notifications.success(
      NOTIFICATION_MESSAGES.PASSWORD_RESET_SENT.title, 
      NOTIFICATION_MESSAGES.PASSWORD_RESET_SENT.description
    );
    
    // ‚úÖ Mostrar estado de √©xito inmediatamente
    forgotCard?.classList.add('hidden');
    loadingOverlay?.classList.add('hidden');
    successOverlay?.classList.remove('hidden');
  }
  
  // ‚úÖ Handle form submission - IGUAL que login/logout
  if (forgotForm) {
    forgotForm.addEventListener('submit', (e) => {
      console.log('üìß Forgot password form submitted');
      
      // Validar email antes de enviar
      const emailInput = document.getElementById('email') as HTMLInputElement;
      if (!emailInput.value || !emailInput.checkValidity()) {
        notifications.error(
          NOTIFICATION_MESSAGES.VALIDATION_ERROR.title, 
          'Please enter a valid email address.'
        );
        return;
      }
      
      // Mostrar spinner en bot√≥n
      if (forgotBtn) {
        forgotBtn.disabled = true;
        btnText?.classList.add('hidden');
        btnSpinner?.classList.remove('hidden');
      }
      
      // Toggle cards despu√©s de breve delay
      setTimeout(() => {
        forgotCard?.classList.add('hidden');
        loadingOverlay?.classList.remove('hidden');
      }, 300);
      
      // ‚úÖ MEJORADO: Timeout con notificaci√≥n de error
      const timeoutId = setTimeout(() => {
        console.log('‚ö†Ô∏è Forgot password taking too long, showing error notification');
        
        // Reset UI
        resetForm();
        loadingOverlay?.classList.add('hidden');
        forgotCard?.classList.remove('hidden');
        
        // ‚úÖ AGREGADO: Mostrar notificaci√≥n de error
        notifications.error('Request timeout', 'The request is taking too long. Please try again.');
      }, 8000);

      // Clear timeout if request succeeds
      if (successFlag) {
        clearTimeout(timeoutId);
      }
    });
  }

  // ‚úÖ AGREGADO: Manejo de errores de URL (igual que login)
  const urlParams = new URLSearchParams(window.location.search);
  const errorParam = urlParams.get('error');

  if (errorParam) {
    switch (errorParam) {
      case 'invalid-link':
        notifications.error('Invalid link', 'The password reset link is invalid or has expired.');
        break;
      case 'rate-limited':
        notifications.error(
          NOTIFICATION_MESSAGES.RATE_LIMITED.title, 
          NOTIFICATION_MESSAGES.RATE_LIMITED.description
        );
        break;
      case 'user-not-found':
        notifications.error('Email not found', 'No account found with that email address.');
        break;
      case 'email-delivery-failed':
        notifications.error('Delivery failed', 'Unable to send email. Please try again later.');
        break;
      default:
        notifications.error(
          NOTIFICATION_MESSAGES.PASSWORD_RESET_ERROR.title, 
          NOTIFICATION_MESSAGES.PASSWORD_RESET_ERROR.description
        );
    }
    
    // Clean URL without reloading
    const cleanUrl = new URL(window.location.href);
    cleanUrl.searchParams.delete('error');
    window.history.replaceState({}, '', cleanUrl.toString());
  }

  function resetForm() {
    if (forgotBtn) {
      forgotBtn.disabled = false;
      btnText?.classList.remove('hidden');
      btnSpinner?.classList.add('hidden');
    }
  }

  // Clear form on back navigation
  window.addEventListener('pageshow', function(event) {
    if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {
      forgotForm?.reset();
      resetForm();
      forgotCard?.classList.remove('hidden');
      loadingOverlay?.classList.add('hidden');
      successOverlay?.classList.add('hidden');
    }
  });

  // Auto-focus email field
  document.addEventListener('DOMContentLoaded', () => {
    const emailField = document.getElementById('email') as HTMLInputElement;
    if (emailField && !emailField.value && !errorParam && !successFlag) {
      // Only auto-focus if there's no error or success state
      setTimeout(() => emailField.focus(), 100);
    }
  });

  // ‚úÖ AGREGADO: Validaci√≥n de email en tiempo real
  const emailInput = document.getElementById('email') as HTMLInputElement;
  if (emailInput) {
    emailInput.addEventListener('input', () => {
      const email = emailInput.value;
      const isValid = emailInput.checkValidity();
      
      // Visual feedback for email validation
      if (email.length > 0) {
        if (isValid) {
          emailInput.classList.remove('border-red-500');
          emailInput.classList.add('border-green-500');
        } else {
          emailInput.classList.remove('border-green-500');
          emailInput.classList.add('border-red-500');
        }
      } else {
        emailInput.classList.remove('border-red-500', 'border-green-500');
      }
    });

    // Reset border on blur if empty
    emailInput.addEventListener('blur', () => {
      if (!emailInput.value) {
        emailInput.classList.remove('border-red-500', 'border-green-500');
      }
    });
  }

  // ‚úÖ AGREGADO: Manejo de estado de red
  window.addEventListener('offline', () => {
    notifications.warning(
      NOTIFICATION_MESSAGES.NETWORK_ERROR.title, 
      'Please check your connection and try again.'
    );
  });

  window.addEventListener('online', () => {
    notifications.info('Connection restored', 'You are back online.');
  });

  // ‚úÖ AGREGADO: Keyboard shortcuts
  document.addEventListener('keydown', (e) => {
    // Escape key to go back to login
    if (e.key === 'Escape' && !successFlag) {
      window.location.href = '/auth/login';
    }
    
    // Enter key to submit form if email is valid
    if (e.key === 'Enter' && e.target === emailInput) {
      const isValid = emailInput.checkValidity();
      if (isValid && forgotBtn && !forgotBtn.disabled) {
        forgotForm?.dispatchEvent(new Event('submit'));
      }
    }
  });

  // ‚úÖ AGREGADO: Rate limiting visual feedback
  let submissionCount = 0;
  const maxSubmissions = 3;
  const cooldownTime = 60000; // 1 minute

  if (forgotForm) {
    const originalSubmitHandler = forgotForm.onsubmit;
    
    forgotForm.addEventListener('submit', (e) => {
      submissionCount++;
      
      if (submissionCount >= maxSubmissions) {
        e.preventDefault();
        
        notifications.warning(
          'Rate limit reached', 
          `Please wait ${cooldownTime / 1000} seconds before trying again.`
        );
        
        // Disable form temporarily
        if (forgotBtn) {
          forgotBtn.disabled = true;
          forgotBtn.textContent = 'Please wait...';
        }
        
        setTimeout(() => {
          submissionCount = 0;
          resetForm();
          if (forgotBtn) {
            forgotBtn.textContent = 'Send reset link';
          }
        }, cooldownTime);
        
        return false;
      }
    });
  }

  // ‚úÖ AGREGADO: Analytics tracking (opcional)
  /**
   * if (typeof gtag !== 'undefined') {
    // Track forgot password attempts
    document.addEventListener('submit', () => {
      gtag('event', 'forgot_password_attempt', {
        event_category: 'authentication',
        event_label: 'password_reset_request'
      });
    });
    
    // Track successful submissions
    if (successFlag) {
      gtag('event', 'forgot_password_success', {
        event_category: 'authentication',
        event_label: 'password_reset_sent'
      });
    }
  }
   */
</script>

<style>
  /* ‚úÖ EXACTAMENTE los mismos estilos que login/logout */
  .btn-spinner {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .btn:hover:not(:disabled) {
    transform: translateY(-1px);
    transition: transform 0.2s ease;
  }

  .forgot-password-container {
    width: 100%;
    min-height: 400px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .hidden {
    display: none !important;
  }

  .input:focus {
    transform: scale(1.01);
    transition: transform 0.2s ease;
  }

  button:focus-visible,
  input:focus-visible,
  a:focus-visible {
    outline: 2px solid hsl(var(--ring));
    outline-offset: 2px;
  }

  .transition-colors {
    transition: color 0.2s ease;
  }

  /* ‚úÖ AGREGADO: Estilos para validaci√≥n de email */
  .input.border-green-500 {
    border-color: #10b981;
    box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
  }

  .input.border-red-500 {
    border-color: #ef4444;
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }

  /* ‚úÖ AGREGADO: Animaci√≥n suave para borders */
  .input {
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
  }

  /* ‚úÖ AGREGADO: Hover effects mejorados */
  .btn-outline:hover {
    background-color: hsl(var(--muted));
    transform: translateY(-1px);
    transition: all 0.2s ease;
  }

  /* ‚úÖ AGREGADO: Loading state animations */
  @keyframes pulse-border {
    0%, 100% { border-color: hsl(var(--border)); }
    50% { border-color: hsl(var(--primary)); }
  }

  .input:focus {
    animation: pulse-border 2s infinite;
  }

  /* ‚úÖ AGREGADO: Success state animations */
  .success-overlay {
    animation: slideInUp 0.3s ease-out;
  }

  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>