---
// LoginForm.astro - ENHANCED with notifications
import { actions } from 'astro:actions';

// Get action result (solo para logs en consola)
const result = Astro.getActionResult(actions.login);
const success = result?.data?.success;
const error = result?.error;

// Log errors to console instead of showing to user
if (error) {
  console.error('‚ùå Login error:', error.message);
}

// Check for URL params
const { searchParams } = new URL(Astro.request.url);
const message = searchParams.get('message');
const errorParam = searchParams.get('error');
const redirectUrl = searchParams.get('redirect') || '/dashboard';

// Log messages to console
if (message) {
  console.log(`üìÑ Login page message: ${message}`);
}
if (errorParam) {
  console.error('‚ùå Login error from URL:', errorParam);
}
---

<!-- ‚úÖ Login container -->
<div class="login-container">
  <!-- ‚úÖ Login card con transition name -->
  <div class="card w-full" id="login-card" transition:name="login-main-card">
    <header transition:name="login-header">
      <h2>Sign in to your account</h2>
      <p>Enter your credentials to access your account</p>
    </header>

    <section transition:name="login-form-section">
      <form method="POST" action={actions.login} class="form grid gap-6" id="login-form">
        <div class="grid gap-2">
          <label for="email">Email address</label>
          <input 
            type="email" 
            id="email" 
            name="email"
            required
            class="input"
            placeholder="Enter your email"
            autocomplete="email"
          />
        </div>

        <div class="grid gap-2">
          <div class="flex items-center justify-between">
            <label for="password">Password</label>
            <a href="/auth/forgot-password" class="text-sm text-primary hover:underline">
              Forgot password?
            </a>
          </div>
          <input 
            type="password" 
            id="password" 
            name="password"
            required
            class="input"
            placeholder="Enter your password"
            autocomplete="current-password"
          />
        </div>

        <div class="flex items-center space-x-2">
          <input type="checkbox" id="remember" name="remember" class="rounded">
          <label for="remember" class="text-sm">Remember me</label>
        </div>

        <!-- Hidden redirect field -->
        <input type="hidden" name="redirect_to" value={redirectUrl} />

        <button type="submit" class="btn w-full" id="login-btn" transition:name="login-submit-button">
          <span class="btn-text">Sign in</span>
          <div class="btn-spinner hidden">
            <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
          </div>
        </button>
      </form>
    </section>

    <footer class="mt-6 text-center" transition:name="login-footer">
      <p class="text-sm text-muted-foreground">
        Don't have an account? 
        <a href="/auth/register" class="text-primary hover:underline font-medium">
          Create one here
        </a>
      </p>
    </footer>
  </div>

  <!-- ‚úÖ Loading state igual que tu logout original -->
  <div class="card w-full text-center hidden" id="loading-overlay" transition:name="login-loading-card">
    <div class="flex flex-col items-center gap-4 py-16">
      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      <p class="text-lg text-muted-foreground">Signing you in...</p>
      <p class="text-sm text-muted-foreground">This will only take a moment...</p>
    </div>
  </div>
</div>

<!-- ‚úÖ CORREGIDO: Hidden success flag usando redirectUrl (no redirect) -->
{success && result?.data && (
  <div 
    id="login-success-flag" 
    style="display: none;" 
    data-redirect={result.data.redirectUrl}
  ></div>
)}

<script>
  // ‚úÖ AGREGADO: Import del sistema de notificaciones
  import { notifications } from '../../lib/utils/notifications';
  
  const loginForm = document.getElementById('login-form') as HTMLFormElement;
  const loginBtn = document.getElementById('login-btn') as HTMLButtonElement;
  const btnText = loginBtn.querySelector('.btn-text');
  const btnSpinner = loginBtn.querySelector('.btn-spinner');
  const loadingOverlay = document.getElementById('loading-overlay');
  const loginCard = document.getElementById('login-card');
  const successFlag = document.getElementById('login-success-flag');

  // ‚úÖ MEJORADO: Handle successful login con notificaci√≥n
  if (successFlag) {
    const redirectUrl = successFlag.getAttribute('data-redirect') || '/dashboard';
    console.log('‚úÖ Login successful, showing notification and redirecting to:', redirectUrl);
    
    // ‚úÖ AGREGADO: Mostrar notificaci√≥n de √©xito
    notifications.auth.loginSuccess();
    
    // ‚úÖ MODIFICADO: Delay para mostrar notificaci√≥n
    setTimeout(() => {
      if ('startViewTransition' in document) {
        (document as any).startViewTransition(() => {
          window.location.href = redirectUrl;
        });
      } else {
        // Fallback para navegadores sin View Transitions
        window.location.href = redirectUrl;
      }
    }, 1000); // Cambi√≥ de inmediato a 1 segundo
  }
  
  // ‚úÖ Handle form submission - MEJORADO con mejor manejo de errores
  if (loginForm) {
    loginForm.addEventListener('submit', (e) => {
      console.log('üîê Login form submitted');
      
      // Solo mostrar spinner en bot√≥n
      loginBtn.disabled = true;
      btnText?.classList.add('hidden');
      btnSpinner?.classList.remove('hidden');
      
      // Simple toggle sin delay
      setTimeout(() => {
        loginCard?.classList.add('hidden');
        loadingOverlay?.classList.remove('hidden');
      }, 300);
      
      // ‚úÖ MEJORADO: Timeout con notificaci√≥n de error
      const timeoutId = setTimeout(() => {
        console.log('‚ö†Ô∏è Login taking too long, showing error notification');
        
        // Reset UI
        resetForm();
        loginCard?.classList.remove('hidden');
        loadingOverlay?.classList.add('hidden');
        
        // ‚úÖ AGREGADO: Mostrar notificaci√≥n de error
        notifications.error('Connection timeout', 'The request is taking too long. Please try again.');
        
        // Fallback redirect despu√©s de mostrar error
        setTimeout(() => {
          window.location.href = '/dashboard';
        }, 2000);
      }, 8000);

      // Clear timeout if login succeeds
      if (successFlag) {
        clearTimeout(timeoutId);
      }
    });
  }

  // ‚úÖ AGREGADO: Manejo de errores de URL
  const urlParams = new URLSearchParams(window.location.search);
  const errorParam = urlParams.get('error');
  const messageParam = urlParams.get('message');

  if (errorParam) {
    switch (errorParam) {
      case 'unauthorized':
        notifications.auth.loginError('Invalid credentials. Please try again.');
        break;
      case 'session-error':
        notifications.warning('Session expired', 'Please sign in again to continue.');
        break;
      case 'rate-limited':
        notifications.warning('Too many attempts', 'Please wait a moment before trying again.');
        break;
      default:
        notifications.auth.loginError();
    }
    
    // Clean URL without reloading
    const cleanUrl = new URL(window.location.href);
    cleanUrl.searchParams.delete('error');
    window.history.replaceState({}, '', cleanUrl.toString());
  }

  if (messageParam === 'logged-out') {
    notifications.auth.logoutSuccess();
    
    // Clean URL
    const cleanUrl = new URL(window.location.href);
    cleanUrl.searchParams.delete('message');
    window.history.replaceState({}, '', cleanUrl.toString());
  }

  function resetForm() {
    if (loginBtn) {
      loginBtn.disabled = false;
      btnText?.classList.remove('hidden');
      btnSpinner?.classList.add('hidden');
    }
  }

  // Clear form on back navigation
  window.addEventListener('pageshow', function(event) {
    if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {
      loginForm?.reset();
      resetForm();
      loginCard?.classList.remove('hidden');
      loadingOverlay?.classList.add('hidden');
    }
  });

  // Auto-focus email field
  document.addEventListener('DOMContentLoaded', () => {
    const emailField = document.getElementById('email') as HTMLInputElement;
    if (emailField && !emailField.value && !errorParam) {
      // Only auto-focus if there's no error (better UX)
      setTimeout(() => emailField.focus(), 100);
    }
  });

  // ‚úÖ AGREGADO: Manejo de estado de red
  window.addEventListener('offline', () => {
    notifications.warning('No internet connection', 'Please check your connection and try again.');
  });

  window.addEventListener('online', () => {
    notifications.info('Connection restored', 'You are back online.');
  });
</script>

<style>
  /* ‚úÖ EXACTAMENTE los mismos estilos que tu logout original */
  .btn-spinner {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .btn:hover:not(:disabled) {
    transform: translateY(-1px);
    transition: transform 0.2s ease;
  }

  .login-container {
    width: 100%;
    min-height: 400px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .hidden {
    display: none !important;
  }

  .input:focus {
    transform: scale(1.01);
    transition: transform 0.2s ease;
  }

  button:focus-visible,
  input:focus-visible,
  a:focus-visible {
    outline: 2px solid hsl(var(--ring));
    outline-offset: 2px;
  }
</style>