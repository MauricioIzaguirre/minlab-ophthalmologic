---
// LoginForm.astro - CORREGIDO sin notificaciones visuales
import { actions } from 'astro:actions';

// Get any action result from the current request
const result = Astro.getActionResult(actions.login);
const success = result?.data?.success;
const data = result?.data;

// Check for URL params (logout message, etc.)
const { searchParams } = new URL(Astro.request.url);
const message = searchParams.get('message');
const redirectUrl = searchParams.get('redirect') || '/dashboard';
---

<div class="card w-full" transition:name="login-card">
  <header>
    <h2>Sign in to your account</h2>
    <p>Enter your credentials to access your account</p>
  </header>

  <!-- Display only URL-based messages (not action errors) -->
  {message === 'logged-out' && (
    <div class="bg-green-50 border border-green-200 text-green-800 rounded-lg p-3 mb-4 text-sm" transition:name="message-banner">
      You have been successfully signed out.
    </div>
  )}

  {message === 'account-created' && (
    <div class="bg-blue-50 border border-blue-200 text-blue-800 rounded-lg p-3 mb-4 text-sm" transition:name="message-banner">
      Account created successfully! Please sign in with your credentials.
    </div>
  )}

  {message === 'session-error' && (
    <div class="bg-yellow-50 border border-yellow-200 text-yellow-800 rounded-lg p-3 mb-4 text-sm" transition:name="message-banner">
      Your session has expired. Please sign in again.
    </div>
  )}

  <!-- NO mostrar errores de acción aquí -->

  <section transition:name="login-form">
    <form method="POST" action={actions.login} class="form grid gap-6" id="login-form">
      <div class="grid gap-2">
        <label for="email">Email address</label>
        <input 
          type="email" 
          id="email" 
          name="email"
          required
          class="input"
          placeholder="Enter your email"
          autocomplete="email"
        />
      </div>

      <div class="grid gap-2">
        <div class="flex items-center justify-between">
          <label for="password">Password</label>
          <a href="/auth/forgot-password" class="text-sm text-primary hover:underline">
            Forgot password?
          </a>
        </div>
        <input 
          type="password" 
          id="password" 
          name="password"
          required
          class="input"
          placeholder="Enter your password"
          autocomplete="current-password"
        />
      </div>

      <div class="flex items-center space-x-2">
        <input type="checkbox" id="remember" name="remember" class="rounded">
        <label for="remember" class="text-sm">Remember me</label>
      </div>

      <!-- Hidden redirect field -->
      <input type="hidden" name="redirect_to" value={redirectUrl} />

      <button type="submit" class="btn w-full" id="login-btn" transition:name="submit-button">
        <span class="btn-text">Sign in</span>
        <div class="btn-spinner hidden">
          <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
        </div>
      </button>
    </form>
  </section>

  <footer class="mt-6 text-center">
    <p class="text-sm text-muted-foreground">
      Don't have an account? 
      <a href="/auth/register" class="text-primary hover:underline font-medium">
        Create one here
      </a>
    </p>
  </footer>
</div>

<script>
  interface LoginFormElements extends HTMLFormControlsCollection {
    email: HTMLInputElement;
    password: HTMLInputElement;
    redirect_to: HTMLInputElement;
  }

  interface LoginForm extends HTMLFormElement {
    readonly elements: LoginFormElements;
  }

  // Handle form submission and response
  const loginForm = document.getElementById('login-form') as LoginForm;
  const loginBtn = document.getElementById('login-btn') as HTMLButtonElement;
  const btnText = loginBtn.querySelector('.btn-text');
  const btnSpinner = loginBtn.querySelector('.btn-spinner');
  
  if (loginForm) {
    // Handle form submission - SOLO mostrar spinner en click
    loginForm.addEventListener('submit', (e) => {
      console.log('🔐 Form submitted, showing loading state...');
      
      // Show loading state SOLO cuando se hace submit
      loginBtn.disabled = true;
      btnText?.classList.add('hidden');
      btnSpinner?.classList.remove('hidden');
    });

    // Check if we have successful action result after page reload
    window.addEventListener('DOMContentLoaded', () => {
      // Check for success result
      const hasSuccess = document.querySelector('[data-login-success]');
      
      if (hasSuccess) {
        const redirectTo = hasSuccess.getAttribute('data-redirect-to');
        console.log('✅ Login successful, redirecting to:', redirectTo);
        
        if (redirectTo) {
          // Use View Transitions API for smooth navigation
          if ('startViewTransition' in document) {
            (document as any).startViewTransition(() => {
              window.location.href = redirectTo;
            });
          } else {
            // Fallback for browsers without View Transitions
            setTimeout(() => {
              window.location.href = redirectTo;
            }, 800);
          }
        }
      }
    });

    // Handle URL search params for direct success messages
    const urlParams = new URLSearchParams(window.location.search);
    const loginStatus = urlParams.get('login');

    if (loginStatus === 'success') {
      const redirectTo = urlParams.get('redirect') || '/dashboard';
      
      if ('startViewTransition' in document) {
        (document as any).startViewTransition(() => {
          window.location.href = redirectTo;
        });
      } else {
        setTimeout(() => {
          window.location.href = redirectTo;
        }, 1000);
      }
    }
  }

  function resetForm() {
    if (loginBtn) {
      loginBtn.disabled = false;
      btnText?.classList.remove('hidden');
      btnSpinner?.classList.add('hidden');
    }
  }

  // Clear form on back navigation to prevent cached values
  window.addEventListener('pageshow', function(event) {
    if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {
      loginForm?.reset();
      resetForm();
    }
  });

  // Auto-focus email field if empty
  document.addEventListener('DOMContentLoaded', () => {
    const emailField = document.getElementById('email') as HTMLInputElement;
    if (emailField && !emailField.value) {
      emailField.focus();
    }
  });
</script>

<style>
  .btn-spinner {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  /* View Transitions styling */
  [transition\:name] {
    view-transition-name: var(--transition-name);
  }

  /* Smooth animations for form interactions */
  .input:focus {
    transform: scale(1.01);
    transition: transform 0.2s ease;
  }

  .btn:hover:not(:disabled) {
    transform: translateY(-1px);
    transition: transform 0.2s ease;
  }
</style>

<!-- Hidden element to pass success data to JavaScript -->
{success && data && (
  <div 
    data-login-success 
    data-redirect-to={data.redirect}
    style="display: none;"
  ></div>
)}