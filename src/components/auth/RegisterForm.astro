---
// RegisterForm.astro - FIXED: TypeScript errors resolved
import { actions } from 'astro:actions';

// Get any action result from the current request - FIXED: Proper type handling
const result = Astro.getActionResult(actions.register);
const error = result?.error;
const data = result?.data;
const success = data?.success;

// IMPORTANTE: NO hacer Astro.redirect() aquí porque causa ResponseSentError
// La redirección se maneja completamente en el frontend
---

<div class="card w-full">
  <header>
    <h2>Create your account</h2>
    <p>Join us today and start your journey</p>
  </header>

  <!-- Display messages -->
  {error && (
    <div class="bg-red-50 border border-red-200 text-red-800 rounded-lg p-3 mb-4 text-sm">
      {error.message}
    </div>
  )}

  <section>
    <!-- FIXED: Use action.toString() for form action -->
    <form method="POST" action={actions.register.toString()} class="form grid gap-6" id="register-form">
      <div class="grid grid-cols-2 gap-4">
        <div class="grid gap-2">
          <label for="first_name">First name</label>
          <input 
            type="text" 
            id="first_name" 
            name="first_name"
            required
            class="input"
            placeholder="Enter your first name"
          />
        </div>
        <div class="grid gap-2">
          <label for="last_name">Last name</label>
          <input 
            type="text" 
            id="last_name" 
            name="last_name"
            required
            class="input"
            placeholder="Enter your last name"
          />
        </div>
      </div>

      <div class="grid gap-2">
        <label for="email">Email address</label>
        <input 
          type="email" 
          id="email" 
          name="email"
          required
          class="input"
          placeholder="Enter your email address"
        />
      </div>

      <div class="grid gap-2">
        <label for="phone">Phone number</label>
        <input 
          type="tel" 
          id="phone" 
          name="phone"
          required
          class="input"
          placeholder="Enter your phone number"
        />
      </div>

      <div class="grid gap-2">
        <label for="password">Password</label>
        <input 
          type="password" 
          id="password" 
          name="password"
          required
          class="input"
          placeholder="Create a strong password"
        />
        <div class="text-xs text-muted-foreground">
          Password must be at least 6 characters long
        </div>
      </div>

      <div class="grid gap-2">
        <label for="confirm_password">Confirm password</label>
        <input 
          type="password" 
          id="confirm_password" 
          name="confirm_password"
          required
          class="input"
          placeholder="Confirm your password"
        />
      </div>

      <!-- Password strength indicator -->
      <div class="grid gap-2" id="password-strength" style="display: none;">
        <div class="flex justify-between items-center">
          <span class="text-xs text-muted-foreground">Password strength</span>
          <span class="text-xs text-muted-foreground" id="strength-text">Weak</span>
        </div>
        <div class="w-full bg-muted rounded-full h-2">
          <div class="bg-red-500 h-2 rounded-full transition-all duration-300" id="strength-bar" style="width: 25%"></div>
        </div>
      </div>

      <div class="flex items-start space-x-2">
        <input 
          type="checkbox" 
          id="terms" 
          name="terms" 
          required 
          class="rounded mt-1"
        />
        <label for="terms" class="text-sm leading-5">
          I agree to the 
          <a href="/legal/terms" class="text-primary hover:underline">Terms of Service</a> 
          and 
          <a href="/legal/privacy" class="text-primary hover:underline">Privacy Policy</a>
        </label>
      </div>

      <div class="flex items-start space-x-2">
        <input 
          type="checkbox" 
          id="marketing" 
          name="marketing" 
          class="rounded mt-1"
        />
        <label for="marketing" class="text-sm leading-5 text-muted-foreground">
          I would like to receive marketing communications and product updates
        </label>
      </div>

      <button type="submit" class="btn w-full" id="register-btn">
        <span class="btn-text">Create account</span>
        <div class="btn-spinner hidden">
          <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
        </div>
      </button>
    </form>
  </section>

  <footer class="mt-6 text-center">
    <p class="text-sm text-muted-foreground">
      Already have an account? 
      <a href="/auth/login" class="text-primary hover:underline font-medium">
        Sign in here
      </a>
    </p>
  </footer>
</div>

<script>
  interface RegisterFormElements extends HTMLFormControlsCollection {
    first_name: HTMLInputElement;
    last_name: HTMLInputElement;
    email: HTMLInputElement;
    phone: HTMLInputElement;
    password: HTMLInputElement;
    confirm_password: HTMLInputElement;
    terms: HTMLInputElement;
    marketing: HTMLInputElement;
  }

  interface RegisterForm extends HTMLFormElement {
    readonly elements: RegisterFormElements;
  }

  // Utility function to show toast notifications
  function showToast(message: string, type: 'success' | 'error' | 'info' | 'warning' = 'info') {
    // Try basecoat event first
    document.dispatchEvent(new CustomEvent('basecoat:toast', {
      detail: {
        config: {
          category: type,
          title: type.charAt(0).toUpperCase() + type.slice(1),
          description: message,
          cancel: { label: 'Dismiss' }
        }
      }
    }));

    // Also trigger custom app event as fallback
    document.dispatchEvent(new CustomEvent('app:toast', {
      detail: { message, type }
    }));
  }

  const registerForm = document.getElementById('register-form') as RegisterForm;
  const registerBtn = document.getElementById('register-btn') as HTMLButtonElement;
  const btnText = registerBtn.querySelector('.btn-text');
  const btnSpinner = registerBtn.querySelector('.btn-spinner');
  const passwordInput = document.getElementById('password') as HTMLInputElement;
  const confirmPasswordInput = document.getElementById('confirm_password') as HTMLInputElement;
  const strengthContainer = document.getElementById('password-strength');
  const strengthBar = document.getElementById('strength-bar');
  const strengthText = document.getElementById('strength-text');

  // Password strength validation
  function checkPasswordStrength(password: string) {
    let score = 0;
    let feedback = 'Weak';
    let color = 'bg-red-500';
    
    if (password.length >= 6) score += 1;
    if (password.length >= 10) score += 1;
    if (/[a-z]/.test(password)) score += 1;
    if (/[A-Z]/.test(password)) score += 1;
    if (/[0-9]/.test(password)) score += 1;
    if (/[^A-Za-z0-9]/.test(password)) score += 1;
    
    switch (true) {
      case score <= 2:
        feedback = 'Weak';
        color = 'bg-red-500';
        break;
      case score <= 4:
        feedback = 'Fair';
        color = 'bg-yellow-500';
        break;
      case score <= 5:
        feedback = 'Good';
        color = 'bg-blue-500';
        break;
      case score >= 6:
        feedback = 'Strong';
        color = 'bg-green-500';
        break;
    }
    
    if (strengthBar && strengthText) {
      strengthBar.className = `${color} h-2 rounded-full transition-all duration-300`;
      strengthBar.style.width = `${(score / 6) * 100}%`;
      strengthText.textContent = feedback;
    }
  }

  // Show password strength on input
  if (passwordInput) {
    passwordInput.addEventListener('input', (e) => {
      const password = (e.target as HTMLInputElement).value;
      if (password.length > 0) {
        strengthContainer!.style.display = 'grid';
        checkPasswordStrength(password);
      } else {
        strengthContainer!.style.display = 'none';
      }
    });
  }

  // Password confirmation validation
  function validatePasswordMatch() {
    const password = passwordInput?.value || '';
    const confirmPassword = confirmPasswordInput?.value || '';
    
    if (confirmPassword && password !== confirmPassword) {
      confirmPasswordInput?.setCustomValidity('Passwords do not match');
      return false;
    } else {
      confirmPasswordInput?.setCustomValidity('');
      return true;
    }
  }

  if (confirmPasswordInput) {
    confirmPasswordInput.addEventListener('input', validatePasswordMatch);
    passwordInput?.addEventListener('input', validatePasswordMatch);
  }

  // Handle form submission
  if (registerForm) {
    registerForm.addEventListener('submit', (e) => {
      // Validate passwords match
      if (!validatePasswordMatch()) {
        e.preventDefault();
        showToast('Passwords do not match. Please verify your password.', 'error');
        return;
      }

      // Show loading state
      registerBtn.disabled = true;
      btnText?.classList.add('hidden');
      btnSpinner?.classList.remove('hidden');
    });

    // Check if we have action result in the page
    const hasActionResult = document.querySelector('[data-action-result]');
    if (hasActionResult) {
      const resultType = hasActionResult.getAttribute('data-result-type');
      const resultMessage = hasActionResult.getAttribute('data-result-message');
      
      if (resultType === 'success' && resultMessage) {
        showToast(resultMessage, 'success');
        // Redirect after showing toast
        setTimeout(() => {
          window.location.href = '/dashboard';
        }, 2000);
      } else if (resultType === 'error' && resultMessage) {
        showToast(resultMessage, 'error');
        resetForm();
      }
    }
  }

  function resetForm() {
    if (registerBtn) {
      registerBtn.disabled = false;
      btnText?.classList.remove('hidden');
      btnSpinner?.classList.add('hidden');
    }
  }

  // Clear form on back navigation
  window.addEventListener('pageshow', function(event) {
    if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {
      registerForm?.reset();
      resetForm();
      strengthContainer!.style.display = 'none';
    }
  });

  // Auto-focus first name field
  document.addEventListener('DOMContentLoaded', () => {
    const firstNameField = document.getElementById('first_name') as HTMLInputElement;
    if (firstNameField && !firstNameField.value) {
      firstNameField.focus();
    }
  });
</script>

<style>
  .btn-spinner {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }
</style>

<!-- FIXED: Hidden element with proper message access -->
{success && data && (
  <div 
    data-action-result 
    data-result-type="success" 
    data-result-message={'Registration successful'}
    style="display: none;"
  ></div>
)}

{error && (
  <div 
    data-action-result 
    data-result-type="error" 
    data-result-message={error.message}
    style="display: none;"
  ></div>
)}