---
// RegisterForm.astro - Functional Registration Component with Astro v5 Actions
import { actions } from 'astro:actions';

// Get any action result from the current request
const result = Astro.getActionResult(actions.register);
const error = result?.error;
const success = result?.data?.success;
---

<div class="card w-full">
  <header>
    <h2>Create your account</h2>
    <p>Join us today and start your journey</p>
  </header>

  <!-- Display messages -->
  {error && (
    <div class="bg-red-50 border border-red-200 text-red-800 rounded-lg p-3 mb-4 text-sm">
      {error.message}
    </div>
  )}

  {success && (
    <div class="bg-green-50 border border-green-200 text-green-800 rounded-lg p-3 mb-4 text-sm">
      Account created successfully! Please check your email to verify your account.
    </div>
  )}

  <section>
    <form method="POST" action={actions.register} class="form grid gap-6" id="register-form">
      <div class="grid grid-cols-2 gap-4">
        <div class="grid gap-2">
          <label for="first_name">First name</label>
          <input 
            type="text" 
            id="first_name" 
            name="first_name"
            required
            class="input"
            placeholder="Enter your first name"
          />
        </div>
        <div class="grid gap-2">
          <label for="last_name">Last name</label>
          <input 
            type="text" 
            id="last_name" 
            name="last_name"
            required
            class="input"
            placeholder="Enter your last name"
          />
        </div>
      </div>

      <div class="grid gap-2">
        <label for="email">Email address</label>
        <input 
          type="email" 
          id="email" 
          name="email"
          required
          class="input"
          placeholder="Enter your email address"
        />
      </div>

      <div class="grid gap-2">
        <label for="phone">Phone number</label>
        <input 
          type="tel" 
          id="phone" 
          name="phone"
          required
          class="input"
          placeholder="Enter your phone number"
        />
      </div>

      <div class="grid gap-2">
        <label for="password">Password</label>
        <input 
          type="password" 
          id="password" 
          name="password"
          required
          class="input"
          placeholder="Create a strong password"
        />
        <div class="text-xs text-muted-foreground">
          Password must be at least 6 characters long
        </div>
      </div>

      <div class="grid gap-2">
        <label for="confirm_password">Confirm password</label>
        <input 
          type="password" 
          id="confirm_password" 
          name="confirm_password"
          required
          class="input"
          placeholder="Confirm your password"
        />
      </div>

      <!-- Password strength indicator -->
      <div class="grid gap-2" id="password-strength" style="display: none;">
        <div class="flex justify-between items-center">
          <span class="text-xs text-muted-foreground">Password strength</span>
          <span class="text-xs text-muted-foreground" id="strength-text">Weak</span>
        </div>
        <div class="w-full bg-muted rounded-full h-2">
          <div class="bg-red-500 h-2 rounded-full transition-all duration-300" id="strength-bar" style="width: 25%"></div>
        </div>
      </div>

      <div class="flex items-start space-x-2">
        <input 
          type="checkbox" 
          id="terms" 
          name="terms" 
          required 
          class="rounded mt-1"
        />
        <label for="terms" class="text-sm leading-5">
          I agree to the 
          <a href="/legal/terms" class="text-primary hover:underline">Terms of Service</a> 
          and 
          <a href="/legal/privacy" class="text-primary hover:underline">Privacy Policy</a>
        </label>
      </div>

      <div class="flex items-start space-x-2">
        <input 
          type="checkbox" 
          id="marketing" 
          name="marketing" 
          class="rounded mt-1"
        />
        <label for="marketing" class="text-sm leading-5 text-muted-foreground">
          I would like to receive marketing communications and product updates
        </label>
      </div>

      <button type="submit" class="btn w-full" id="register-btn">
        Create account
      </button>
    </form>


  </section>

  <footer class="mt-6 text-center">
    <p class="text-sm text-muted-foreground">
      Already have an account? 
      <a href="/auth/login" class="text-primary hover:underline font-medium">
        Sign in here
      </a>
    </p>
  </footer>
</div>

<!-- Loading overlay (initially hidden) -->
<div class="card w-full hidden" id="loading-overlay">
  <div class="flex flex-col items-center gap-4 py-8">
    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
    <p class="text-muted-foreground">Creating your account...</p>
  </div>
</div>

<script>
  const registerForm = document.getElementById('register-form') as HTMLFormElement;
  const registerBtn = document.getElementById('register-btn') as HTMLButtonElement;
  const loadingOverlay = document.getElementById('loading-overlay');
  const registerCard = document.querySelector('.card:not(.hidden)');
  const passwordInput = document.getElementById('password') as HTMLInputElement;
  const confirmPasswordInput = document.getElementById('confirm_password') as HTMLInputElement;
  const strengthContainer = document.getElementById('password-strength');
  const strengthBar = document.getElementById('strength-bar');
  const strengthText = document.getElementById('strength-text');

  // Password strength validation
  function checkPasswordStrength(password: string) {
    let score = 0;
    let feedback = 'Weak';
    let color = 'bg-red-500';
    
    if (password.length >= 6) score += 1;
    if (password.length >= 10) score += 1;
    if (/[a-z]/.test(password)) score += 1;
    if (/[A-Z]/.test(password)) score += 1;
    if (/[0-9]/.test(password)) score += 1;
    if (/[^A-Za-z0-9]/.test(password)) score += 1;
    
    switch (true) {
      case score <= 2:
        feedback = 'Weak';
        color = 'bg-red-500';
        break;
      case score <= 4:
        feedback = 'Fair';
        color = 'bg-yellow-500';
        break;
      case score <= 5:
        feedback = 'Good';
        color = 'bg-blue-500';
        break;
      case score >= 6:
        feedback = 'Strong';
        color = 'bg-green-500';
        break;
    }
    
    if (strengthBar && strengthText) {
      strengthBar.className = `${color} h-2 rounded-full transition-all duration-300`;
      strengthBar.style.width = `${(score / 6) * 100}%`;
      strengthText.textContent = feedback;
    }
  }

  // Show password strength on input
  if (passwordInput) {
    passwordInput.addEventListener('input', (e) => {
      const password = (e.target as HTMLInputElement).value;
      if (password.length > 0) {
        strengthContainer!.style.display = 'grid';
        checkPasswordStrength(password);
      } else {
        strengthContainer!.style.display = 'none';
      }
    });
  }

  // Password confirmation validation
  function validatePasswordMatch() {
    const password = passwordInput?.value || '';
    const confirmPassword = confirmPasswordInput?.value || '';
    
    if (confirmPassword && password !== confirmPassword) {
      confirmPasswordInput?.setCustomValidity('Passwords do not match');
      return false;
    } else {
      confirmPasswordInput?.setCustomValidity('');
      return true;
    }
  }

  if (confirmPasswordInput) {
    confirmPasswordInput.addEventListener('input', validatePasswordMatch);
    passwordInput?.addEventListener('input', validatePasswordMatch);
  }

  // Handle form submission
  if (registerForm) {
    registerForm.addEventListener('submit', (e) => {
      // Validate passwords match
      if (!validatePasswordMatch()) {
        e.preventDefault();
        return;
      }

      // Show loading state
      registerBtn.disabled = true;
      registerBtn.textContent = 'Creating account...';
      
      // Show loading overlay after short delay if form is slow
      const loadingTimeout = setTimeout(() => {
        registerCard?.classList.add('hidden');
        loadingOverlay?.classList.remove('hidden');
      }, 1000);
      
      // Clear timeout if form completes quickly
      const observer = new MutationObserver(() => {
        clearTimeout(loadingTimeout);
      });
      observer.observe(document.body, { childList: true, subtree: true });
    });
  }

  // Handle Google signup - REMOVED
  // Google authentication not implemented in this application
  
  // Auto-redirect after successful registration
  if (window.location.search.includes('success')) {
    setTimeout(() => {
      window.location.href = '/auth/login?message=account-created';
    }, 3000);
  }

  // Clear form on back navigation
  window.addEventListener('pageshow', function(event) {
    if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {
      registerForm?.reset();
      if (registerBtn) {
        registerBtn.disabled = false;
        registerBtn.textContent = 'Create account';
      }
      strengthContainer!.style.display = 'none';
    }
  });
</script>

<style>
  .input {
    @apply px-3 py-2 border border-input bg-background rounded-md text-sm ring-offset-background;
    @apply focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2;
    @apply disabled:cursor-not-allowed disabled:opacity-50;
  }
  
  .btn {
    @apply inline-flex items-center justify-center rounded-md text-sm font-medium;
    @apply ring-offset-background transition-colors;
    @apply focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2;
    @apply disabled:pointer-events-none disabled:opacity-50;
    @apply bg-primary text-primary-foreground hover:bg-primary/90;
    @apply h-10 px-4 py-2;
  }
  
  .btn-outline {
    @apply inline-flex items-center justify-center rounded-md text-sm font-medium;
    @apply ring-offset-background transition-colors;
    @apply focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2;
    @apply disabled:pointer-events-none disabled:opacity-50;
    @apply border border-input bg-background hover:bg-accent hover:text-accent-foreground;
    @apply h-10 px-4 py-2;
  }

  .card {
    @apply rounded-lg border bg-card text-card-foreground shadow-sm p-6;
  }

  .form {
    @apply space-y-4;
  }

  input:invalid:not(:placeholder-shown) {
    @apply border-red-500;
  }

  input:valid:not(:placeholder-shown) {
    @apply border-green-500;
  }
</style>