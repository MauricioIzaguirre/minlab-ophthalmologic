---
// src/components/availability/AvailabilityHeader.astro
interface Props {
  weekStart: Date;
  weekEnd: Date;
  selectedWeek: string;
}

const { weekStart, weekEnd, selectedWeek } = Astro.props;

// Formatear fechas para mostrar
const formatDateRange = (start: Date, end: Date) => {
  const startMonth = start.toLocaleDateString('es-ES', { month: 'short' });
  const endMonth = end.toLocaleDateString('es-ES', { month: 'short' });
  const startDay = start.getDate();
  const endDay = end.getDate();
  const year = end.getFullYear();
  
  if (startMonth === endMonth) {
    return `${startDay} - ${endDay} ${startMonth} ${year}`;
  }
  return `${startDay} ${startMonth} - ${endDay} ${endMonth} ${year}`;
};
---

<div class="bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 px-6 py-4">
  <div class="flex items-center justify-between">
    
    <!-- Navegación de semanas -->
    <div class="flex items-center gap-3">
      <button 
        type="button" 
        class="btn-sm-icon-outline"
        id="prev-week"
        data-tooltip="Previous week"
        data-side="bottom"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="m15 18-6-6 6-6"/>
        </svg>
      </button>

      <div class="text-center">
        <h2 class="text-lg font-semibold text-gray-900 dark:text-white">
          {formatDateRange(weekStart, weekEnd)}
        </h2>
        <p class="text-sm text-gray-500 dark:text-gray-400">
          Semana {selectedWeek}
        </p>
      </div>

      <button 
        type="button" 
        class="btn-sm-icon-outline"
        id="next-week"
        data-tooltip="Next week"
        data-side="bottom"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="m9 18 6-6-6-6"/>
        </svg>
      </button>
    </div>

    <!-- Controles y filtros -->
    <div class="flex items-center gap-3">
      
      <!-- Selector de doctor -->
      <div class="relative">
        <select class="input-sm pr-8 appearance-none bg-white dark:bg-gray-800" id="doctor-filter">
          <option value="">Todos los doctores</option>
          <option value="dr-001">Dr. María González</option>
          <option value="dr-002">Dr. Carlos Rodríguez</option>
          <option value="dr-003">Dra. Ana Martínez</option>
          <option value="dr-004">Dr. Luis Fernando Pérez</option>
          <option value="dr-005">Dra. Carmen Silva</option>
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-gray-400">
            <path d="m6 9 6 6 6-6"/>
          </svg>
        </div>
      </div>

      <!-- Selector de ubicación -->
      <div class="relative">
        <select class="input-sm pr-8 appearance-none bg-white dark:bg-gray-800" id="location-filter">
          <option value="">Todas las ubicaciones</option>
          <option value="loc-001">Hospital Central</option>
          <option value="loc-002">Clínica Norte</option>
          <option value="loc-003">Centro Médico Sur</option>
          <option value="loc-004">Hospital Especializado</option>
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-gray-400">
            <path d="m6 9 6 6 6-6"/>
          </svg>
        </div>
      </div>

      <!-- Botón "Hoy" -->
      <button 
        type="button" 
        class="btn-sm-outline"
        id="today-btn"
      >
        Hoy
      </button>

      <!-- Opciones de vista -->
      <div class="flex items-center border border-gray-200 dark:border-gray-600 rounded-md">
        <button 
          type="button" 
          class="px-3 py-1.5 text-sm font-medium text-white bg-primary rounded-l-md"
          id="week-view"
        >
          Semana
        </button>
        <button 
          type="button" 
          class="px-3 py-1.5 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-r-md"
          id="month-view"
        >
          Mes
        </button>
      </div>

      <!-- Botón de agregar cita -->
      <button 
        type="button" 
        class="btn-sm text-primary-foreground bg-primary hover:bg-primary/90"
        id="add-appointment"
        data-tooltip="Add new appointment"
        data-side="bottom"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1.5">
          <path d="M5 12h14" />
          <path d="M12 5v14" />
        </svg>
        Nueva Cita
      </button>
    </div>
  </div>
</div>

<!-- Script para manejar interacciones del header -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Navegación de semanas
    const prevWeekBtn = document.getElementById('prev-week');
    const nextWeekBtn = document.getElementById('next-week');
    const todayBtn = document.getElementById('today-btn');
    
    // Filtros
    const doctorFilter = document.getElementById('doctor-filter');
    const locationFilter = document.getElementById('location-filter');
    
    // Vistas
    const weekViewBtn = document.getElementById('week-view');
    const monthViewBtn = document.getElementById('month-view');
    
    // Eventos de navegación
    prevWeekBtn?.addEventListener('click', () => {
      // Aquí implementarías la lógica para ir a la semana anterior
      console.log('Navegando a semana anterior');
      dispatchEvent(new CustomEvent('week-navigation', { 
        detail: { direction: 'prev' }
      }));
    });
    
    nextWeekBtn?.addEventListener('click', () => {
      console.log('Navegando a semana siguiente');
      dispatchEvent(new CustomEvent('week-navigation', { 
        detail: { direction: 'next' }
      }));
    });
    
    todayBtn?.addEventListener('click', () => {
      console.log('Navegando a semana actual');
      dispatchEvent(new CustomEvent('week-navigation', { 
        detail: { direction: 'today' }
      }));
    });
    
    // Eventos de filtros
    doctorFilter?.addEventListener('change', (e) => {
    const selectedDoctor = (e.target as HTMLSelectElement)?.value || '';
      console.log('Filtrando por doctor:', selectedDoctor);
      dispatchEvent(new CustomEvent('filter-change', { 
        detail: { type: 'doctor', value: selectedDoctor }
      }));
    });
    
    locationFilter?.addEventListener('change', (e) => {
      const selectedLocation = (e.target as HTMLSelectElement)?.value || '';
      console.log('Filtrando por ubicación:', selectedLocation);
      dispatchEvent(new CustomEvent('filter-change', { 
        detail: { type: 'location', value: selectedLocation }
      }));
    });
    
    // Cambio de vista
    weekViewBtn?.addEventListener('click', () => {
      weekViewBtn.classList.remove('text-gray-700', 'dark:text-gray-300');
      weekViewBtn.classList.add('text-white', 'bg-primary');
      monthViewBtn?.classList.remove('text-white', 'bg-primary');
      monthViewBtn?.classList.add('text-gray-700', 'dark:text-gray-300');
      
      dispatchEvent(new CustomEvent('view-change', { 
        detail: { view: 'week' }
      }));
    });
    
    monthViewBtn?.addEventListener('click', () => {
      monthViewBtn.classList.remove('text-gray-700', 'dark:text-gray-300');
      monthViewBtn.classList.add('text-white', 'bg-primary');
      weekViewBtn?.classList.remove('text-white', 'bg-primary');
      weekViewBtn?.classList.add('text-gray-700', 'dark:text-gray-300');
      
      dispatchEvent(new CustomEvent('view-change', { 
        detail: { view: 'month' }
      }));
    });
  });
</script>

<style>
  /* Estilos personalizados para los selectores */
  select.input-sm {
    min-width: 160px;
  }
  
  /* Animaciones suaves para los botones de vista */
  #week-view,
  #month-view {
    transition: all 0.2s ease;
  }
  
  /* Mejor contraste para los botones activos */
  .bg-primary {
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
  }
</style>