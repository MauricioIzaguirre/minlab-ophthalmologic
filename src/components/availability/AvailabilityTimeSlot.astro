---
import type { IDoctor } from '../../types/doctors';
import type { ILocation } from '../../types/location';
import type { ISchedule } from '../../types/schedule';

// src/components/availability/AvailabilityTimeSlot.astro

interface Props {
  schedule: ISchedule & { doctor: IDoctor; location: ILocation };
  time: string;
}

const { schedule, time } = Astro.props;

// Obtener color seg칰n especializaci칩n
const getSpecializationColor = (specialization: string) => {
  const colors = {
    'Oftalmolog칤a': 'bg-blue-500',
    'Cardiolog칤a': 'bg-red-500', 
    'Pediatr칤a': 'bg-green-500',
    'Neurolog칤a': 'bg-purple-500',
    'Dermatolog칤a': 'bg-pink-500',
    'Ginecolog칤a': 'bg-indigo-500',
    'Traumatolog칤a': 'bg-orange-500',
    'Psiquiatr칤a': 'bg-cyan-500',
    'Medicina General': 'bg-gray-500',
    'Endocrinolog칤a': 'bg-yellow-500'
  };
return colors[specialization as keyof typeof colors] || 'bg-gray-500';
};

const specializationColor = getSpecializationColor(schedule.doctor.specialization);

// Calcular duraci칩n del slot (para determinar altura)
const calculateSlotHeight = () => {
  const startHour = parseInt(schedule.startTime.split(':')[0]);
  const startMinute = parseInt(schedule.startTime.split(':')[1]);
  const endHour = parseInt(schedule.endTime.split(':')[0]);
  const endMinute = parseInt(schedule.endTime.split(':')[1]);
  
  const startMinutes = startHour * 60 + startMinute;
  const endMinutes = endHour * 60 + endMinute;
  const duration = endMinutes - startMinutes;
  
  // Cada slot de 30 minutos = 64px de altura
  return Math.max(1, Math.floor(duration / 30));
};

const slotHeight = calculateSlotHeight();
---

<div 
  class={`${specializationColor} rounded-lg p-2 text-white text-xs cursor-pointer hover:shadow-md transition-all duration-200 group relative`}
  style={`height: ${slotHeight * 64 - 4}px; z-index: 1;`}
  data-schedule-id={schedule.id}
  data-doctor-id={schedule.doctorId}
  data-location-id={schedule.locationId}
  data-specialization={schedule.doctor.specialization}
  data-tooltip={`${schedule.doctor.name} - ${schedule.location.name}`}
  data-side="right"
>
  <!-- Contenido principal del slot -->
  <div class="flex flex-col h-full justify-between">
    
    <!-- Informaci칩n del doctor -->
    <div class="flex-1 min-h-0">
      <div class="font-semibold truncate text-xs leading-tight">
        {schedule.doctor.name.split(' ').slice(0, 2).join(' ')}
      </div>
      
      <div class="text-xs opacity-90 truncate mt-0.5">
        {schedule.doctor.specialization}
      </div>
      
      {slotHeight > 2 && (
        <div class="text-xs opacity-75 truncate mt-1">
          游늸 {schedule.location.name}
        </div>
      )}
    </div>

    <!-- Horario y estado -->
    <div class="flex items-center justify-between mt-1">
      <span class="text-xs opacity-90">
        {schedule.startTime} - {schedule.endTime}
      </span>
      
      <!-- Indicadores de estado -->
      <div class="flex items-center gap-1">
        {schedule.maxPatients && (
          <span class="inline-flex items-center justify-center w-4 h-4 text-xs bg-white/20 rounded-full">
            {schedule.maxPatients}
          </span>
        )}
        
        {schedule.isActive ? (
          <div class="w-2 h-2 bg-green-300 rounded-full" title="Activo"></div>
        ) : (
          <div class="w-2 h-2 bg-red-300 rounded-full" title="Inactivo"></div>
        )}
      </div>
    </div>
  </div>

  <!-- Overlay de hover con acciones -->
  <div class="absolute inset-0 bg-black/20 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center">
    <div class="flex gap-1">
      <button 
        type="button" 
        class="p-1 bg-white/20 hover:bg-white/30 rounded text-white"
        data-action="view"
        data-tooltip="Ver detalles"
        data-side="top"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/>
          <circle cx="12" cy="12" r="3"/>
        </svg>
      </button>
      
      <button 
        type="button" 
        class="p-1 bg-white/20 hover:bg-white/30 rounded text-white"
        data-action="edit"
        data-tooltip="Editar horario"
        data-side="top"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/>
        </svg>
      </button>
      
      <button 
        type="button" 
        class="p-1 bg-white/20 hover:bg-white/30 rounded text-white"
        data-action="book"
        data-tooltip="Agendar cita"
        data-side="top"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M5 12h14" />
          <path d="M12 5v14" />
        </svg>
      </button>
    </div>
  </div>

  <!-- Indicador de descanso si aplica -->
  {schedule.breakTime && (
    <div class="absolute top-0 right-0 w-3 h-3 bg-yellow-400 rounded-full transform translate-x-1 -translate-y-1" title="Incluye descanso"></div>
  )}
</div>

<!-- Script para manejar clics en los slots -->
<script define:vars={{ scheduleData: schedule }}>
  // Este script se ejecuta para cada instancia del componente
  document.addEventListener('DOMContentLoaded', () => {
    const slot = document.querySelector(`[data-schedule-id="${scheduleData.id}"]`);
    
    if (slot) {
      // Click en el slot principal
      slot.addEventListener('click', (e) => {
        if (e.target.closest('[data-action]')) return; // Evitar conflicto con botones de acci칩n
        
        console.log('Slot clickeado:', scheduleData);
        
        // Dispatchar evento personalizado para que el componente padre lo maneje
        window.dispatchEvent(new CustomEvent('slot-selected', {
          detail: {
            schedule: scheduleData,
            action: 'view'
          }
        }));
      });
      
      // Manejar botones de acci칩n
      const actionButtons = slot.querySelectorAll('[data-action]');
      actionButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.stopPropagation();
          const action = e.currentTarget.dataset.action;
          
          console.log(`Acci칩n ${action} en schedule:`, scheduleData);
          
          window.dispatchEvent(new CustomEvent('slot-action', {
            detail: {
              schedule: scheduleData,
              action: action
            }
          }));
        });
      });
    }
  });
</script>

<style>
  /* Animaciones personalizadas para el slot */
  .group:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
  
  /* Mejores transiciones */
  .transition-all {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Efectos de hover en botones de acci칩n */
  [data-action]:hover {
    transform: scale(1.1);
  }
  
  /* Colores espec칤ficos por especializaci칩n con gradientes */
  [data-specialization="Oftalmolog칤a"] {
    background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
  }
  
  [data-specialization="Cardiolog칤a"] {
    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
  }
  
  [data-specialization="Pediatr칤a"] {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  }
  
  [data-specialization="Neurolog칤a"] {
    background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
  }
  
  [data-specialization="Dermatolog칤a"] {
    background: linear-gradient(135deg, #ec4899 0%, #db2777 100%);
  }
  
  [data-specialization="Ginecolog칤a"] {
    background: linear-gradient(135deg, #6366f1 0%, #4f46e5 100%);
  }
  
  [data-specialization="Traumatolog칤a"] {
    background: linear-gradient(135deg, #f97316 0%, #ea580c 100%);
  }
  
  [data-specialization="Psiquiatr칤a"] {
    background: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%);
  }
  
  [data-specialization="Medicina General"] {
    background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
  }
  
  [data-specialization="Endocrinolog칤a"] {
    background: linear-gradient(135deg, #eab308 0%, #ca8a04 100%);
  }
  
  /* Animaci칩n sutil para el indicador de descanso */
  .absolute.top-0.right-0 {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.7;
    }
  }
</style>