---
// src/components/availability/AvailabilityWeekView.astro
import type { IWeekView } from "../../types";
import AvailabilityTimeSlot from "./AvailabilityTimeSlot.astro";
import AvailabilityHeader from "./AvailabilityHeader.astro";

interface Props {
  weekData: IWeekView;
  selectedWeek: string;
}

const { weekData, selectedWeek } = Astro.props;

// Generar slots de tiempo cada 30 minutos desde 6:00 AM hasta 8:00 PM
const generateTimeSlots = () => {
  const slots = [];
  for (let hour = 6; hour < 20; hour++) {
    for (let minute = 0; minute < 60; minute += 30) {
      const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
      slots.push(time);
    }
  }
  return slots;
};

const timeSlots = generateTimeSlots();
const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
---

<div class="bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-700 overflow-hidden">
  <!-- Header del calendario -->
  <AvailabilityHeader 
    weekStart={weekData.weekStart} 
    weekEnd={weekData.weekEnd}
    selectedWeek={selectedWeek}
  />

  <!-- Contenedor principal del calendario -->
  <div class="relative">
    <!-- Grid del calendario - Similar al diseño Teacher's Schedule -->
    <div class="grid grid-cols-8 min-h-[600px]" id="availability-grid">
      
      <!-- Columna de tiempos (primera columna) -->
      <div class="bg-gray-50 dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700">
        <!-- Espacio vacío para el header -->
        <div class="h-12 border-b border-gray-200 dark:border-gray-700"></div>
        
        <!-- Slots de tiempo -->
        {timeSlots.map((time) => (
          <div class="h-16 border-b border-gray-200 dark:border-gray-700 flex items-center justify-center text-xs text-gray-500 dark:text-gray-400 font-medium">
            {time}
          </div>
        ))}
      </div>

      <!-- Columnas de días (7 columnas) -->
      {weekData.days.map((dayData, dayIndex) => (
        <div class="border-r border-gray-200 dark:border-gray-700 last:border-r-0">
          <!-- Header del día -->
          <div class="h-12 bg-gray-50 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 flex flex-col items-center justify-center">
            <span class="text-xs text-gray-500 dark:text-gray-400 font-medium">
              {dayData.dayName}
            </span>
            <span class="text-sm font-semibold text-gray-900 dark:text-white">
              {dayData.date.getDate()}
            </span>
          </div>

          <!-- Slots del día -->
          {timeSlots.map((time) => {
            // Encontrar horarios que coincidan con este día y hora
            const schedulesForSlot = dayData.schedules.filter(schedule => {
              const slotHour = parseInt(time.split(':')[0]);
              const slotMinute = parseInt(time.split(':')[1]);
              const startHour = parseInt(schedule.startTime.split(':')[0]);
              const startMinute = parseInt(schedule.startTime.split(':')[1]);
              const endHour = parseInt(schedule.endTime.split(':')[0]);
              const endMinute = parseInt(schedule.endTime.split(':')[1]);
              
              const slotMinutes = slotHour * 60 + slotMinute;
              const startMinutes = startHour * 60 + startMinute;
              const endMinutes = endHour * 60 + endMinute;
              
              return slotMinutes >= startMinutes && slotMinutes < endMinutes;
            });

            return (
              <div class="h-16 border-b border-gray-100 dark:border-gray-700 relative group hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors">
                {schedulesForSlot.length > 0 ? (
                  <div class="absolute inset-0 p-1">
                    {schedulesForSlot.map((schedule) => (
                      <AvailabilityTimeSlot 
                        schedule={schedule}
                        time={time}
                      />
                    ))}
                  </div>
                ) : (
                  <!-- Slot vacío interactivo -->
                  <div 
                    class="h-full w-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer"
                    data-time={time}
                    data-date={dayData.date.toISOString().split('T')[0]}
                  >
                    <button 
                      type="button" 
                      class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 text-xs"
                      data-tooltip="Add appointment"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M5 12h14" />
                        <path d="M12 5v14" />
                      </svg>
                    </button>
                  </div>
                )}
              </div>
            );
          })}
        </div>
      ))}
    </div>
  </div>

  <!-- Leyenda -->
  <div class="border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 px-4 py-3">
    <div class="flex items-center justify-between">
      <div class="flex items-center gap-4 text-xs">
        <div class="flex items-center gap-2">
          <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
          <span class="text-gray-600 dark:text-gray-300">Oftalmología</span>
        </div>
        <div class="flex items-center gap-2">
          <div class="w-3 h-3 bg-red-500 rounded-full"></div>
          <span class="text-gray-600 dark:text-gray-300">Cardiología</span>
        </div>
        <div class="flex items-center gap-2">
          <div class="w-3 h-3 bg-green-500 rounded-full"></div>
          <span class="text-gray-600 dark:text-gray-300">Pediatría</span>
        </div>
        <div class="flex items-center gap-2">
          <div class="w-3 h-3 bg-purple-500 rounded-full"></div>
          <span class="text-gray-600 dark:text-gray-300">Neurología</span>
        </div>
      </div>
      
      <div class="text-xs text-gray-500 dark:text-gray-400">
        Week {selectedWeek} • {weekData.weekStart.toLocaleDateString('es-ES', { 
          day: 'numeric', 
          month: 'short' 
        })} - {weekData.weekEnd.toLocaleDateString('es-ES', { 
          day: 'numeric', 
          month: 'short',
          year: 'numeric'
        })}
      </div>
    </div>
  </div>
</div>

<style>
  /* Scroll horizontal suave en móviles */
  #availability-grid {
    min-width: 800px;
  }
  
  @media (max-width: 768px) {
    #availability-grid {
      overflow-x: auto;
    }
  }
  
  /* Animaciones suaves para hover */
  .group:hover {
    background-color: rgba(59, 130, 246, 0.05);
  }
  
  /* Mejores colores por especialización */
  [data-specialization="Oftalmología"] {
    background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
  }
  
  [data-specialization="Cardiología"] {
    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
  }
  
  [data-specialization="Pediatría"] {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  }
  
  [data-specialization="Neurología"] {
    background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
  }
</style>