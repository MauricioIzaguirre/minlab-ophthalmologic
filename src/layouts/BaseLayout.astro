---
// BaseLayout.astro - CON SOLUCI√ìN ANTI-PARPADEO MEJORADA
import "../styles/global.css";
import AppSidebar from "../components/layout/AppSidebar.astro";
import AppHeader from "../components/layout/AppHeader.astro";
import { ClientRouter } from "astro:transitions";

export interface Props {
  title?: string;
  description?: string;
}

const {
  title = "Mi Aplicaci√≥n",
  description = "Plataforma moderna para gesti√≥n eficiente"
} = Astro.props;
---

<!doctype html>
<html lang="en" class="theme-claude">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- ‚úÖ SOLUCI√ìN ANTI-PARPADEO: Script ANTES de ClientRouter -->
    <script is:inline>
      (() => {
        // ‚úÖ Funci√≥n para aplicar tema inmediatamente
        function applyTheme() {
          try {
            const stored = localStorage.getItem('themeMode');
            const prefersDark = matchMedia('(prefers-color-scheme: dark)').matches;
            const shouldBeDark = stored ? stored === 'dark' : prefersDark;
            
            // ‚úÖ CR√çTICO: Aplicar clase ANTES de cualquier renderizado
            document.documentElement.classList.toggle('dark', shouldBeDark);
            
            // ‚úÖ Tambi√©n aplicar al body para compatibilidad con Basecoat
            if (document.body) {
              document.body.classList.toggle('dark', shouldBeDark);
            }
            
            return shouldBeDark;
          } catch (e) {
            console.warn('Theme detection failed:', e);
            return false;
          }
        }

        // ‚úÖ APLICAR INMEDIATAMENTE
        const isDark = applyTheme();
        
        // ‚úÖ Funci√≥n para cambio de tema
        const changeTheme = (dark) => {
          document.documentElement.classList.toggle('dark', dark);
          if (document.body) {
            document.body.classList.toggle('dark', dark);
          }
          try { 
            localStorage.setItem('themeMode', dark ? 'dark' : 'light'); 
          } catch (e) {
            console.warn('Failed to save theme preference:', e);
          }
        };

        // ‚úÖ Event listener para basecoat
        document.addEventListener('basecoat:theme', (event) => {
          const mode = event.detail?.mode;
          const newDark = mode === 'dark' ? true
                         : mode === 'light' ? false
                         : !document.documentElement.classList.contains('dark');
          changeTheme(newDark);
        });

        // ‚úÖ CR√çTICO: Preservar tema durante View Transitions
        document.addEventListener('astro:before-swap', (event) => {
          const currentDark = document.documentElement.classList.contains('dark');
          
          // ‚úÖ Aplicar tema al nuevo documento INMEDIATAMENTE
          event.newDocument.documentElement.classList.toggle('dark', currentDark);
          
          // ‚úÖ Tambi√©n aplicar al body del nuevo documento
          if (event.newDocument.body) {
            event.newDocument.body.classList.toggle('dark', currentDark);
          }
          
          console.log(`üé® Theme preserved during transition: ${currentDark ? 'dark' : 'light'}`);
        });

        // ‚úÖ Reforzar tema despu√©s del swap
        document.addEventListener('astro:after-swap', () => {
          // Re-aplicar tema por si acaso
          applyTheme();
          
          // ‚úÖ Re-inicializar Basecoat si es necesario
          if (window.basecoat && typeof window.basecoat.init === 'function') {
            try {
              window.basecoat.init();
            } catch (e) {
              console.warn('Basecoat re-initialization failed:', e);
            }
          }
        });

        // ‚úÖ Page load handler
        document.addEventListener('astro:page-load', () => {
          console.log('üìÑ Page loaded with View Transitions');
          applyTheme(); // Reforzar tema
        });

        console.log(`üé® Initial theme applied: ${isDark ? 'dark' : 'light'}`);
      })();
    </script>
    
    <!-- ‚úÖ ClientRouter DESPU√âS del script de tema -->
    <ClientRouter />
    
    <!-- Preconnect to external domains for performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- ‚úÖ Basecoat scripts -->
    <script src="https://cdn.jsdelivr.net/npm/basecoat-css@0.3.2/dist/js/basecoat.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/basecoat-css@0.3.2/dist/js/sidebar.min.js" defer></script>
  </head>

  <body class="min-h-screen bg-background font-sans antialiased hide-scrollbar">
    <!-- ‚úÖ Main Application Container -->
    <div class="relative flex min-h-screen w-full" transition:name="app-container">
      
      <!-- ‚úÖ Application Sidebar -->
      <div transition:name="app-sidebar">
        <AppSidebar />
      </div>
      
      <!-- ‚úÖ Main Content Area -->
      <div class="flex flex-1 flex-col lg:ml-64" transition:name="main-content">
        <!-- ‚úÖ Application Header -->
        <div transition:name="app-header">
          <AppHeader />
        </div>
        
        <!-- ‚úÖ Page Content -->
        <main class="flex-1 p-4" transition:name="page-content">
          <slot />
        </main>
      </div>
    </div>
  </body>
</html>

<style>
  /* ‚úÖ CR√çTICO: CSS Variables con !important para prevenir parpadeos */
  :root {
    --theme-transition: none !important; /* Disable CSS transitions during theme switch */
  }

  /* ‚úÖ Transiciones suaves solo para elementos espec√≠ficos */
  html {
    /* NO transition en background para evitar flickers */
    color-scheme: light;
  }

  html.dark {
    color-scheme: dark;
  }

  /* ‚úÖ Focus styles */
  button:focus-visible,
  input:focus-visible,
  a:focus-visible,
  select:focus-visible {
    outline: 2px solid hsl(var(--ring));
    outline-offset: 2px;
  }

  /* ‚úÖ Hide scrollbar optimizado */
  html::-webkit-scrollbar,
  body::-webkit-scrollbar {
    width: 0px;
    height: 0px;
    background: transparent;
  }
  
  html::-webkit-scrollbar-thumb,
  body::-webkit-scrollbar-thumb {
    background: transparent;
  }
  
  html::-webkit-scrollbar-track,
  body::-webkit-scrollbar-track {
    background: transparent;
  }
  
  html,
  body {
    -ms-overflow-style: none;
    scrollbar-width: none;
    overflow-x: hidden;
  }
  
  .hide-scrollbar::-webkit-scrollbar {
    width: 0px;
    height: 0px;
    background: transparent;
  }
  
  .hide-scrollbar::-webkit-scrollbar-thumb {
    background: transparent;
  }
  
  .hide-scrollbar::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .hide-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  /* ‚úÖ Responsive sidebar */
  @media (max-width: 1023px) {
    .sidebar {
      position: fixed;
      top: 0;
      left: 0;
      z-index: 50;
      height: 100vh;
      width: 16rem;
      transform: translateX(-100%);
      transition: transform 0.3s ease;
    }
    
    .sidebar:not([aria-hidden="true"]) {
      transform: translateX(0);
    }
    
    .sidebar:not([aria-hidden="true"])::before {
      content: '';
      position: fixed;
      top: 0;
      left: 16rem;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      z-index: -1;
    }
  }
  
  @media (min-width: 1024px) {
    .sidebar {
      position: fixed;
      top: 0;
      left: 0;
      z-index: 40;
      height: 100vh;
      width: 16rem;
    }
  }

  /* ‚úÖ View Transitions optimizations */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }

  /* ‚úÖ ANTI-PARPADEO: Prevenir FOUC durante transiciones */
  [data-astro-transition] {
    animation-fill-mode: both;
  }

  /* ‚úÖ View transition root debe mantener tema */
  ::view-transition-group(root) {
    animation-duration: 0.2s;
  }

  /* ‚úÖ Asegurar que elementos con transition names mantengan styling */
  [transition\:name] {
    backface-visibility: hidden;
    transform: translateZ(0);
  }
</style>